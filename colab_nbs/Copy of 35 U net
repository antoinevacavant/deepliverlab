{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of 35 U net","version":"0.3.2","views":{},"default_view":{},"provenance":[{"file_id":"1BgCDxVdVc0MAe_kC0waMGUV9ShcWW0hM","timestamp":1524766889902}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"hw66ln2H3YzQ","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":1188},"outputId":"86adf4d4-8d4f-4a1b-887e-e329b89f2c23","executionInfo":{"status":"error","timestamp":1524767010941,"user_tz":-330,"elapsed":40623,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np,sys,os\n","from sklearn.utils import shuffle\n","from scipy.ndimage import imread\n","from scipy.misc import imresize\n","import matplotlib.pyplot as plt\n","\n","np.random.seed(678)\n","tf.set_random_seed(5678)\n","\n","def tf_relu(x): return tf.nn.relu(x)\n","def d_tf_relu(s): return tf.cast(tf.greater(s,0),dtype=tf.float32)\n","def tf_softmax(x): return tf.nn.softmax(x)\n","def np_sigmoid(x): 1/(1 + np.exp(-1 *x))\n","\n","# --- make class ---\n","class conlayer_left():\n","    \n","    def __init__(self,ker,in_c,out_c):\n","        self.w = tf.Variable(tf.random_normal([ker,ker,in_c,out_c],stddev=0.05))\n","\n","    def feedforward(self,input,stride=1,dilate=1):\n","        self.input  = input\n","        self.layer  = tf.nn.conv2d(input,self.w,strides = [1,stride,stride,1],padding='SAME')\n","        self.layerA = tf_relu(self.layer)\n","        return self.layerA\n","\n","class conlayer_right():\n","    \n","    def __init__(self,ker,in_c,out_c):\n","        self.w = tf.Variable(tf.random_normal([ker,ker,in_c,out_c],stddev=0.05))\n","\n","    def feedforward(self,input,stride=1,dilate=1,output=1):\n","        self.input  = input\n","\n","        current_shape_size = input.shape\n","\n","        self.layer = tf.nn.conv2d_transpose(input,self.w,\n","        output_shape=[batch_size] + [int(current_shape_size[1].value*2),int(current_shape_size[2].value*2),int(current_shape_size[3].value/2)],strides=[1,2,2,1],padding='SAME')\n","        self.layerA = tf_relu(self.layer)\n","        return self.layerA\n","\n","# --- get data ---\n","data_location = \"./DRIVE/training/images/\"\n","train_data = []  # create an empty list\n","for dirName, subdirList, fileList in sorted(os.walk(data_location)):\n","    for filename in fileList:\n","        if \".tif\" in filename.lower():  # check whether the file's DICOM\n","            train_data.append(os.path.join(dirName,filename))\n","\n","data_location = \"./DRIVE/training/1st_manual/\"\n","train_data_gt = []  # create an empty list\n","for dirName, subdirList, fileList in sorted(os.walk(data_location)):\n","    for filename in fileList:\n","        if \".tif\" in filename.lower():  # check whether the file's DICOM\n","            train_data_gt.append(os.path.join(dirName,filename))\n","\n","\n","train_images = np.zeros(shape=(128,256,256,1))\n","train_labels = np.zeros(shape=(128,256,256,1))\n","\n","for file_index in range(len(train_data)):\n","    train_images[file_index,:,:]   = np.expand_dims(imresize(imread(train_data[file_index],mode='F',flatten=True),(256,256)),axis=2)\n","    train_labels[file_index,:,:]   = np.expand_dims(imresize(imread(train_data_gt[file_index],mode='F',flatten=True),(256,256)),axis=2)\n","\n","train_images = (train_images - train_images.min()) / (train_images.max() - train_images.min())\n","train_labels = (train_labels - train_labels.min()) / (train_labels.max() - train_labels.min())\n","\n","# --- hyper ---\n","num_epoch = 100\n","init_lr = 0.0001\n","batch_size = 2\n","\n","# --- make layer ---\n","# left\n","l1_1 = conlayer_left(3,1,3)\n","l1_2 = conlayer_left(3,3,3)\n","l1_3 = conlayer_left(3,3,3)\n","\n","l2_1 = conlayer_left(3,3,6)\n","l2_2 = conlayer_left(3,6,6)\n","l2_3 = conlayer_left(3,6,6)\n","\n","l3_1 = conlayer_left(3,6,12)\n","l3_2 = conlayer_left(3,12,12)\n","l3_3 = conlayer_left(3,12,12)\n","\n","l4_1 = conlayer_left(3,12,24)\n","l4_2 = conlayer_left(3,24,24)\n","l4_3 = conlayer_left(3,24,24)\n","\n","l5_1 = conlayer_left(3,24,48)\n","l5_2 = conlayer_left(3,48,48)\n","l5_3 = conlayer_left(3,48,24)\n","\n","# right\n","l6_1 = conlayer_right(3,24,48)\n","l6_2 = conlayer_left(3,24,24)\n","l6_3 = conlayer_left(3,24,12)\n","\n","l7_1 = conlayer_right(3,12,24)\n","l7_2 = conlayer_left(3,12,12)\n","l7_3 = conlayer_left(3,12,6)\n","\n","l8_1 = conlayer_right(3,6,12)\n","l8_2 = conlayer_left(3,6,6)\n","l8_3 = conlayer_left(3,6,3)\n","\n","l9_1 = conlayer_right(3,3,6)\n","l9_2 = conlayer_left(3,3,3)\n","l9_3 = conlayer_left(3,3,3)\n","\n","l10_final = conlayer_left(3,3,1)\n","\n","# ---- make graph ----\n","x = tf.placeholder(shape=[None,256,256,1],dtype=tf.float32)\n","y = tf.placeholder(shape=[None,256,256,1],dtype=tf.float32)\n","\n","layer1_1 = l1_1.feedforward(x)\n","layer1_2 = l1_2.feedforward(layer1_1)\n","layer1_3 = l1_3.feedforward(layer1_2)\n","\n","layer2_Input = tf.nn.max_pool(layer1_3,ksize=[1,2,2,1],strides=[1,2,2,1],padding='VALID')\n","layer2_1 = l2_1.feedforward(layer2_Input)\n","layer2_2 = l2_2.feedforward(layer2_1)\n","layer2_3 = l2_3.feedforward(layer2_2)\n","\n","layer3_Input = tf.nn.max_pool(layer2_3,ksize=[1,2,2,1],strides=[1,2,2,1],padding='VALID')\n","layer3_1 = l3_1.feedforward(layer3_Input)\n","layer3_2 = l3_2.feedforward(layer3_1)\n","layer3_3 = l3_3.feedforward(layer3_2)\n","\n","layer4_Input = tf.nn.max_pool(layer3_3,ksize=[1,2,2,1],strides=[1,2,2,1],padding='VALID')\n","layer4_1 = l4_1.feedforward(layer4_Input)\n","layer4_2 = l4_2.feedforward(layer4_1)\n","layer4_3 = l4_3.feedforward(layer4_2)\n","\n","layer5_Input = tf.nn.max_pool(layer4_3,ksize=[1,2,2,1],strides=[1,2,2,1],padding='VALID')\n","layer5_1 = l5_1.feedforward(layer5_Input)\n","layer5_2 = l5_2.feedforward(layer5_1)\n","layer5_3 = l5_3.feedforward(layer5_2)\n","\n","layer6_Input = tf.concat([layer5_3,layer5_Input],axis=3)\n","layer6_1 = l6_1.feedforward(layer6_Input)\n","layer6_2 = l6_2.feedforward(layer6_1)\n","layer6_3 = l6_3.feedforward(layer6_2)\n","\n","layer7_Input = tf.concat([layer6_3,layer4_Input],axis=3)\n","layer7_1 = l7_1.feedforward(layer7_Input)\n","layer7_2 = l7_2.feedforward(layer7_1)\n","layer7_3 = l7_3.feedforward(layer7_2)\n","\n","layer8_Input = tf.concat([layer7_3,layer3_Input],axis=3)\n","layer8_1 = l8_1.feedforward(layer8_Input)\n","layer8_2 = l8_2.feedforward(layer8_1)\n","layer8_3 = l8_3.feedforward(layer8_2)\n","\n","layer9_Input = tf.concat([layer8_3,layer2_Input],axis=3)\n","layer9_1 = l9_1.feedforward(layer9_Input)\n","layer9_2 = l9_2.feedforward(layer9_1)\n","layer9_3 = l9_3.feedforward(layer9_2)\n","\n","layer10 = l10_final.feedforward(layer9_3)\n","\n","cost = tf.reduce_mean(tf.square(layer10-y))\n","auto_train = tf.train.AdamOptimizer(learning_rate=init_lr).minimize(cost)\n","\n","# --- start session ---\n","with tf.Session() as sess:\n","    sess.run(tf.global_variables_initializer())\n","\n","    for iter in range(num_epoch):\n","        \n","        # train\n","        for current_batch_index in range(0,len(train_images),batch_size):\n","            current_batch = train_images[current_batch_index:current_batch_index+batch_size,:,:,:]\n","            current_label = train_labels[current_batch_index:current_batch_index+batch_size,:,:,:]\n","            sess_results = sess.run([cost,auto_train],feed_dict={x:current_batch,y:current_label})\n","            print(' Iter: ', iter, \" Cost:  %.32f\"% sess_results[0],end='\\r')\n","        print('\\n-----------------------')\n","        train_images,train_labels = shuffle(train_images,train_labels)\n","\n","        if iter % 2 == 0:\n","            test_example =   train_images[:2,:,:,:]\n","            test_example_gt = train_labels[:2,:,:,:]\n","            sess_results = sess.run([layer10],feed_dict={x:test_example})\n","\n","            sess_results = sess_results[0][0,:,:,:]\n","            test_example = test_example[0,:,:,:]\n","            test_example_gt = test_example_gt[0,:,:,:]\n","\n","            plt.figure()\n","            plt.imshow(np.squeeze(test_example),cmap='gray')\n","            plt.axis('off')\n","            plt.title('Original Image')\n","            plt.savefig('train_change/'+str(iter)+\"a_Original_Image.png\")\n","\n","            plt.figure()\n","            plt.imshow(np.squeeze(test_example_gt),cmap='gray')\n","            plt.axis('off')\n","            plt.title('Ground Truth Mask')\n","            plt.savefig('train_change/'+str(iter)+\"b_Original_Mask.png\")\n","\n","            plt.figure()\n","            plt.imshow(np.squeeze(sess_results),cmap='gray')\n","            plt.axis('off')\n","            plt.title('Generated Mask')\n","            plt.savefig('train_change/'+str(iter)+\"c_Generated_Mask.png\")\n","\n","            plt.figure()\n","            plt.imshow(np.multiply(np.squeeze(test_example),np.squeeze(test_example_gt)),cmap='gray')\n","            plt.axis('off')\n","            plt.title(\"Ground Truth Overlay\")\n","            plt.savefig('train_change/'+str(iter)+\"d_Original_Image_Overlay.png\")\n","\n","            plt.figure()\n","            plt.axis('off')\n","            plt.imshow(np.multiply(np.squeeze(test_example),np.squeeze(sess_results)),cmap='gray')\n","            plt.title(\"Generated Overlay\")\n","            plt.savefig('train_change/'+str(iter)+\"e_Generated_Image_Overlay.png\")\n","\n","            plt.close('all')\n","\n","\n","    for data_index in range(0,len(train_images),batch_size):\n","        current_batch = train_images[current_batch_index:current_batch_index+batch_size,:,:,:]\n","        current_label = train_labels[current_batch_index:current_batch_index+batch_size,:,:,:]\n","        sess_results = sess.run(layer10,feed_dict={x:current_batch})\n","\n","        plt.figure()\n","        plt.imshow(np.squeeze(current_batch[0,:,:,:]),cmap='gray')\n","        plt.axis('off')\n","        plt.title(str(data_index)+\"a_Original Image\")\n","        plt.savefig('gif/'+str(data_index)+\"a_Original_Image.png\")\n","\n","        plt.figure()\n","        plt.imshow(np.squeeze(current_label[0,:,:,:]),cmap='gray')\n","        plt.axis('off')\n","        plt.title(str(data_index)+\"b_Original Mask\")\n","        plt.savefig('gif/'+str(data_index)+\"b_Original_Mask.png\")\n","        \n","        plt.figure()\n","        plt.imshow(np.squeeze(sess_results[0,:,:,:]),cmap='gray')\n","        plt.axis('off')\n","        plt.title(str(data_index)+\"c_Generated Mask\")\n","        plt.savefig('gif/'+str(data_index)+\"c_Generated_Mask.png\")\n","\n","        plt.figure()\n","        plt.imshow(np.multiply(np.squeeze(current_batch[0,:,:,:]),np.squeeze(current_label[0,:,:,:])),cmap='gray')\n","        plt.axis('off')\n","        plt.title(str(data_index)+\"d_Original Image Overlay\")\n","        plt.savefig('gif/'+str(data_index)+\"d_Original_Image_Overlay.png\")\n","       \n","        plt.figure()\n","        plt.imshow(np.multiply(np.squeeze(current_batch[0,:,:,:]),np.squeeze(sess_results[0,:,:,:])),cmap='gray')\n","        plt.axis('off')\n","        plt.title(str(data_index)+\"e_Generated Image Overlay\")\n","        plt.savefig('gif/'+str(data_index)+\"e_Generated_Image_Overlay.png\")\n","\n","        plt.close('all')\n","\n","\n","# -- end code --"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:66: RuntimeWarning: invalid value encountered in true_divide\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:67: RuntimeWarning: invalid value encountered in true_divide\n"],"name":"stderr"},{"output_type":"stream","text":[" Iter:  0  Cost:  nan\n","-----------------------\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/matplotlib/colors.py:897: UserWarning: Warning: converting a masked element to nan.\n","  dtype = np.min_scalar_type(value)\n","/usr/local/lib/python3.6/dist-packages/numpy/ma/core.py:716: UserWarning: Warning: converting a masked element to nan.\n","  data = np.array(a, copy=False, subok=subok)\n"],"name":"stderr"},{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-c9a41ad67a5c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    194\u001b[0m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'off'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    195\u001b[0m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Original Image'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 196\u001b[0;31m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'train_change/'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m\"a_Original_Image.png\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    197\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    699\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m     \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgcf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 701\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m# need this if 'transparent=True' to reset colors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(self, fname, **kwargs)\u001b[0m\n\u001b[1;32m   1832\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_frameon\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframeon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1834\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1835\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1836\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mframeon\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, **kwargs)\u001b[0m\n\u001b[1;32m   2265\u001b[0m                 \u001b[0morientation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morientation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2266\u001b[0m                 \u001b[0mbbox_inches_restore\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_bbox_inches_restore\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2267\u001b[0;31m                 **kwargs)\n\u001b[0m\u001b[1;32m   2268\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2269\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbbox_inches\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mrestore_bbox\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, *args, **kwargs)\u001b[0m\n\u001b[1;32m    510\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    511\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename_or_obj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstring_types\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 512\u001b[0;31m             \u001b[0mfilename_or_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename_or_obj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'wb'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    513\u001b[0m             \u001b[0mclose\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    514\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'train_change/0a_Original_Image.png'"]},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAVMAAAFZCAYAAAAl0MwSAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAACuxJREFUeJzt3E+IVnXfx/GvjmigUs2Amv3DFlpR\nYhBRVKSjNqM2kBpElBrVohbKkBhC1CIhjBAjsyIDkbQ/ipgITQ6kFmSUFrQIw5ZlaeHoKFrJOHMv\nHu6hMOtxns+Ntw+v1+qc61y/c37nWrw5f4YZ1NfX11cA/J8MPt8TAPj/QEwBAsQUIEBMAQLEFCBA\nTAECxJQB6+vrq3Xr1lVbW1u1trZWS0tLPfvss9XV1XXWMQsWLKhvvvnmb/e7YsWKeueddwY8r1Wr\nVtXTTz99xuc//PBDXX/99QPeL/ydIed7Aly4Vq5cWbt37641a9bUmDFjqqenp1auXFnz5s2rzZs3\n10UXXXTGmHXr1v3jfhcvXvyfmC78R7kyZUCOHj1a69atqxdffLHGjBlTVVVDhgypJUuW1LBhw2rr\n1q1VVdXc3FyvvPJKtbS01I8//ljNzc21d+/eqqp6/fXX67bbbqu5c+fWhg0bqrm5uaqqli5dWq++\n+mr/+Hfffbfuu+++uuOOO2r58uX9c9i0aVPNmDGj7r777nrwwQfrwIED53QOEyZMqI0bN1ZbW1vd\ndddd9dlnn9WTTz5ZU6ZMqccee6x6enqqquqjjz6qtra2amlpqTlz5tS+ffuqqqq3t7eWLVtWt99+\nez3wwAP1xhtv1Lx586qq6tixY7VkyZJqaWmpqVOn1ubNmwf6U3OBEFMG5Ouvv67LLrusxo0bd8a2\n5ubm+uKLL/rXDx06VNu3b6+xY8f2f/bdd9/Vm2++WVu3bq233367Pvzww7Mea8+ePfXee+/V5s2b\na/369XXw4ME6fPhwPffcc7V27drq7Oysq666qj/A5+LIkSO1bdu2mjlzZi1atKgWLlxY27dvr/37\n99eePXuqp6enli5dWsuWLavt27dXc3NzvfDCC1VV9fHHH9cnn3xSnZ2d9dprr9WWLVv697t8+fIa\nPHhwdXR01KZNm2rVqlW1f//+c54fFw4xZUCOHj1ajY2Nf7mtqampuru7+9cnT558xnf27NlTt9xy\nS40aNaqGDRtWc+fOPeux2traqqGhoUaPHl1NTU31008/VVNTU3355Zf9V8U333xzff/99+d8HtOm\nTauqqvHjx9eVV15Z48aNq6FDh9bVV19dhw4dqiFDhtTu3btr0qRJZxxn7969NXny5Bo+fHhdcskl\nNWvWrP797ty5s+bPn1+DBw+uxsbGmj59enV2dp7z/LhweGbKgFx66aX1888//+W2w4cPV1NTU//6\nxRdffMZ3jh079qfPR48efdZjjRgxon+5oaGhTp8+XadPn66XX365duzYUadPn64TJ0785VXyPxk+\nfHhVVQ0ePLh/+d/H6e3traqqt956q7Zs2VKnTp2qU6dO1aBBg/rP4Y/z/uPy8ePHq729vRoaGqqq\n6vfff6/W1tZznh8XDjFlQG666abq7u6ub7/9tq699to/bdu5c2f/s8OzGTFiRJ08ebJ//WxhPpsP\nPvigduzYUevXr6/GxsbauHFjbdu27Zz28b/x1Vdf1Zo1a2rTpk11xRVX1KefflrPPPNMVZ15Dr/8\n8kv/8qhRo2r16tU1fvz4+Jz47+Q2nwEZOXJkPf7447VkyZL+296enp5asWJF9fb21syZM/92/MSJ\nE+vzzz+vrq6uOnXqVL3//vvndPzDhw/X5ZdfXo2NjXXkyJHq6OioEydODPh8zqarq6uamppq7Nix\n9euvv9aWLVvq5MmT1dfXVzfeeGPt2rWrfvvttzp27Fh1dHT0j/v3i7Oq//ldnn/++X/8kzAubGLK\ngD366KN1//331xNPPFGtra01a9as6u7urrVr19bQoUP/duzEiRNr9uzZNXv27Jo/f35NmTLlnI59\nzz331NGjR2v69Om1ePHiam9vr4MHD/7pbX/CnXfeWaNGjapp06bVI488UgsWLKiRI0fWokWLavr0\n6XXDDTdUa2trLVy4sGbMmNE/rr29vY4fP14tLS01a9as6u3trQkTJkTnxn+XQf6fKedLX19f//PH\nXbt21UsvvXTOV6jn2x/PYcOGDbV79+5avXr1eZ4V54MrU86Lrq6uuvXWW+vAgQPV19dXHR0d/W/M\nLxT79u2rqVOnVnd3d/X09FRnZ+cFdw7keAHFedHY2Fjt7e318MMP16BBg+qaa66pp5566nxP65xc\nd911de+999acOXOqoaGhJk2aVA899ND5nhbnidt8gAC3+QABYgoQIKYAAWIKECCmAAFiChAgpgAB\nYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFi\nChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIK\nECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQ\nIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAg\npgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCm\nAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYA\nAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgAB\nYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFi\nChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIK\nECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQ\nIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAg\npgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCm\nAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYA\nAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgAB\nYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFi\nChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIK\nECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQ\nIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAg\npgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgABYgoQIKYAAWIKECCm\nAAFiChAgpgABYgoQIKYAAWIKECCmAAFiChAgpgAB/wIFrhHyNcit4wAAAABJRU5ErkJggg==\n","text/plain":["<matplotlib.figure.Figure at 0x7f35e66b7b70>"]},"metadata":{"tags":[]}}]}]}