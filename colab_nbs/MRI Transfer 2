{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MRI Transfer 2","version":"0.3.2","views":{},"default_view":{},"provenance":[]},"kernelspec":{"name":"python2","display_name":"Python 2"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"gEIDPmJiLG0r","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":3910},"outputId":"9a9c6b7c-bedd-4544-efd3-274f162e836d","executionInfo":{"status":"ok","timestamp":1529932078322,"user_tz":-330,"elapsed":14274,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!apt-get install python-pip python-numpy python-scipy libboost-python-dev build-essential"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","build-essential is already the newest version (12.4ubuntu1).\n","The following additional packages will be installed:\n","  dbus gir1.2-glib-2.0 libapparmor1 libboost-python1.62-dev\n","  libboost-python1.62.0 libboost1.62-dev libdbus-1-3 libdbus-glib-1-2\n","  libgirepository-1.0-1 libjbig0 liblcms2-2 libpython-all-dev libtiff5\n","  libwebp6 libwebpmux3 python-all python-all-dev python-asn1crypto\n","  python-cffi-backend python-crypto python-cryptography python-dbus\n","  python-decorator python-enum34 python-gi python-idna python-imaging\n","  python-ipaddress python-keyring python-keyrings.alt python-olefile\n","  python-pil python-pip-whl python-pkg-resources python-secretstorage\n","  python-setuptools python-six python-wheel python-xdg\n","Suggested packages:\n","  default-dbus-session-bus | dbus-session-bus libboost1.62-doc gccxml\n","  libboost-atomic1.62-dev libboost-chrono1.62-dev libboost-context1.62-dev\n","  libboost-coroutine1.62-dev libboost-date-time1.62-dev\n","  libboost-exception1.62-dev libboost-fiber1.62-dev\n","  libboost-filesystem1.62-dev libboost-graph1.62-dev\n","  libboost-graph-parallel1.62-dev libboost-iostreams1.62-dev\n","  libboost-locale1.62-dev libboost-log1.62-dev libboost-math1.62-dev\n","  libboost-mpi1.62-dev libboost-mpi-python1.62-dev\n","  libboost-program-options1.62-dev libboost-random1.62-dev\n","  libboost-regex1.62-dev libboost-serialization1.62-dev\n","  libboost-signals1.62-dev libboost-system1.62-dev libboost-test1.62-dev\n","  libboost-thread1.62-dev libboost-timer1.62-dev libboost-type-erasure1.62-dev\n","  libboost-wave1.62-dev libboost1.62-tools-dev libmpfrc++-dev libntl-dev\n","  liblcms2-utils python-crypto-dbg python-crypto-doc python-cryptography-doc\n","  python-cryptography-vectors python-dbus-dbg python-dbus-doc\n","  python-enum34-doc python-gi-cairo gnome-keyring libkf5wallet-bin\n","  gir1.2-gnomekeyring-1.0 python-fs python-gdata python-keyczar python-nose\n","  python-numpy-dbg python-numpy-doc python-pil-doc python-pil-dbg\n","  python-scipy-doc python-secretstorage-doc python-setuptools-doc\n","The following NEW packages will be installed:\n","  dbus gir1.2-glib-2.0 libapparmor1 libboost-python-dev\n","  libboost-python1.62-dev libboost-python1.62.0 libboost1.62-dev libdbus-1-3\n","  libdbus-glib-1-2 libgirepository-1.0-1 libjbig0 liblcms2-2 libpython-all-dev\n","  libtiff5 libwebp6 libwebpmux3 python-all python-all-dev python-asn1crypto\n","  python-cffi-backend python-crypto python-cryptography python-dbus\n","  python-decorator python-enum34 python-gi python-idna python-imaging\n","  python-ipaddress python-keyring python-keyrings.alt python-numpy\n","  python-olefile python-pil python-pip python-pip-whl python-pkg-resources\n","  python-scipy python-secretstorage python-setuptools python-six python-wheel\n","  python-xdg\n","0 upgraded, 43 newly installed, 0 to remove and 6 not upgraded.\n","Need to get 22.6 MB of archives.\n","After this operation, 185 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu artful/main amd64 libjbig0 amd64 2.1-3.1 [26.6 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu artful-updates/main amd64 libapparmor1 amd64 2.11.0-2ubuntu17.1 [28.9 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu artful/main amd64 libdbus-1-3 amd64 1.10.22-1ubuntu1 [165 kB]\n","Get:4 http://archive.ubuntu.com/ubuntu artful/main amd64 dbus amd64 1.10.22-1ubuntu1 [144 kB]\n","Get:5 http://archive.ubuntu.com/ubuntu artful/main amd64 libgirepository-1.0-1 amd64 1.54.1-1 [82.1 kB]\n","Get:6 http://archive.ubuntu.com/ubuntu artful/main amd64 gir1.2-glib-2.0 amd64 1.54.1-1 [131 kB]\n","Get:7 http://archive.ubuntu.com/ubuntu artful/main amd64 libdbus-glib-1-2 amd64 0.108-2 [67.1 kB]\n","Get:8 http://archive.ubuntu.com/ubuntu artful/main amd64 libboost1.62-dev amd64 1.62.0+dfsg-4build3 [7,030 kB]\n","Get:9 http://archive.ubuntu.com/ubuntu artful/main amd64 libboost-python1.62.0 amd64 1.62.0+dfsg-4build3 [113 kB]\n","Get:10 http://archive.ubuntu.com/ubuntu artful/universe amd64 libboost-python1.62-dev amd64 1.62.0+dfsg-4build3 [142 kB]\n","Get:11 http://archive.ubuntu.com/ubuntu artful/universe amd64 libboost-python-dev amd64 1.62.0.1 [3,254 B]\n","Get:12 http://archive.ubuntu.com/ubuntu artful/main amd64 liblcms2-2 amd64 2.7-1ubuntu1 [137 kB]\n","Get:13 http://archive.ubuntu.com/ubuntu artful/main amd64 libpython-all-dev amd64 2.7.14-2ubuntu1 [1,006 B]\n","Get:14 http://archive.ubuntu.com/ubuntu artful-updates/main amd64 libtiff5 amd64 4.0.8-5ubuntu0.1 [150 kB]\n","Get:15 http://archive.ubuntu.com/ubuntu artful/main amd64 libwebp6 amd64 0.6.0-3 [181 kB]\n","Get:16 http://archive.ubuntu.com/ubuntu artful/main amd64 libwebpmux3 amd64 0.6.0-3 [20.0 kB]\n","Get:17 http://archive.ubuntu.com/ubuntu artful/main amd64 python-all amd64 2.7.14-2ubuntu1 [994 B]\n","Get:18 http://archive.ubuntu.com/ubuntu artful/main amd64 python-all-dev amd64 2.7.14-2ubuntu1 [1,014 B]\n","Get:19 http://archive.ubuntu.com/ubuntu artful/main amd64 python-asn1crypto all 0.22.0-1 [69.9 kB]\n","Get:20 http://archive.ubuntu.com/ubuntu artful/main amd64 python-cffi-backend amd64 1.9.1-2build2 [59.7 kB]\n","Get:21 http://archive.ubuntu.com/ubuntu artful-updates/main amd64 python-crypto amd64 2.6.1-7ubuntu0.1 [244 kB]\n","Get:22 http://archive.ubuntu.com/ubuntu artful/main amd64 python-enum34 all 1.1.6-1 [34.6 kB]\n","Get:23 http://archive.ubuntu.com/ubuntu artful/main amd64 python-idna all 2.5-1 [31.5 kB]\n","Get:24 http://archive.ubuntu.com/ubuntu artful/main amd64 python-ipaddress all 1.0.17-1 [18.2 kB]\n","Get:25 http://archive.ubuntu.com/ubuntu artful/main amd64 python-six all 1.10.0-4 [10.8 kB]\n","Get:26 http://archive.ubuntu.com/ubuntu artful/main amd64 python-cryptography amd64 1.9-1 [215 kB]\n","Get:27 http://archive.ubuntu.com/ubuntu artful/main amd64 python-dbus amd64 1.2.4-1build3 [84.8 kB]\n","Get:28 http://archive.ubuntu.com/ubuntu artful/main amd64 python-decorator all 4.1.1-1 [9,200 B]\n","Get:29 http://archive.ubuntu.com/ubuntu artful/main amd64 python-gi amd64 3.24.1-2build1 [195 kB]\n","Get:30 http://archive.ubuntu.com/ubuntu artful/main amd64 python-olefile all 0.44-1 [36.2 kB]\n","Get:31 http://archive.ubuntu.com/ubuntu artful/main amd64 python-pil amd64 4.1.1-3build2 [311 kB]\n","Get:32 http://archive.ubuntu.com/ubuntu artful/universe amd64 python-imaging all 4.1.1-3build2 [4,294 B]\n","Get:33 http://archive.ubuntu.com/ubuntu artful/main amd64 python-secretstorage all 2.3.1-2 [11.8 kB]\n","Get:34 http://archive.ubuntu.com/ubuntu artful/main amd64 python-keyring all 10.4.0-1 [30.6 kB]\n","Get:35 http://archive.ubuntu.com/ubuntu artful/main amd64 python-keyrings.alt all 2.2-2 [16.2 kB]\n","Get:36 http://archive.ubuntu.com/ubuntu artful/main amd64 python-numpy amd64 1:1.12.1-3.1ubuntu4 [1,885 kB]\n","Get:37 http://archive.ubuntu.com/ubuntu artful/universe amd64 python-pip-whl all 9.0.1-2 [1,379 kB]\n","Get:38 http://archive.ubuntu.com/ubuntu artful/universe amd64 python-pip all 9.0.1-2 [151 kB]\n","Get:39 http://archive.ubuntu.com/ubuntu artful/main amd64 python-pkg-resources all 36.2.7-2 [128 kB]\n","Get:40 http://archive.ubuntu.com/ubuntu artful/main amd64 python-setuptools all 36.2.7-2 [260 kB]\n","Get:41 http://archive.ubuntu.com/ubuntu artful/universe amd64 python-wheel all 0.29.0-2 [48.3 kB]\n","Get:42 http://archive.ubuntu.com/ubuntu artful/universe amd64 python-xdg all 0.25-4 [31.4 kB]\n","Get:43 http://archive.ubuntu.com/ubuntu artful/universe amd64 python-scipy amd64 0.18.1-2ubuntu5 [8,898 kB]\n","Fetched 22.6 MB in 0s (47.8 MB/s)\n","Extracting templates from packages: 100%\n","Selecting previously unselected package libjbig0:amd64.\n","(Reading database ... 18396 files and directories currently installed.)\n","Preparing to unpack .../00-libjbig0_2.1-3.1_amd64.deb ...\n","Unpacking libjbig0:amd64 (2.1-3.1) ...\n","Selecting previously unselected package libapparmor1:amd64.\n","Preparing to unpack .../01-libapparmor1_2.11.0-2ubuntu17.1_amd64.deb ...\n","Unpacking libapparmor1:amd64 (2.11.0-2ubuntu17.1) ...\n","Selecting previously unselected package libdbus-1-3:amd64.\n","Preparing to unpack .../02-libdbus-1-3_1.10.22-1ubuntu1_amd64.deb ...\n","Unpacking libdbus-1-3:amd64 (1.10.22-1ubuntu1) ...\n","Selecting previously unselected package dbus.\n","Preparing to unpack .../03-dbus_1.10.22-1ubuntu1_amd64.deb ...\n","Unpacking dbus (1.10.22-1ubuntu1) ...\n"],"name":"stdout"},{"output_type":"stream","text":["Selecting previously unselected package libgirepository-1.0-1:amd64.\r\n","Preparing to unpack .../04-libgirepository-1.0-1_1.54.1-1_amd64.deb ...\r\n","Unpacking libgirepository-1.0-1:amd64 (1.54.1-1) ...\n","Selecting previously unselected package gir1.2-glib-2.0:amd64.\n","Preparing to unpack .../05-gir1.2-glib-2.0_1.54.1-1_amd64.deb ...\n","Unpacking gir1.2-glib-2.0:amd64 (1.54.1-1) ...\n","Selecting previously unselected package libdbus-glib-1-2:amd64.\n","Preparing to unpack .../06-libdbus-glib-1-2_0.108-2_amd64.deb ...\n","Unpacking libdbus-glib-1-2:amd64 (0.108-2) ...\n","Selecting previously unselected package libboost1.62-dev:amd64.\n","Preparing to unpack .../07-libboost1.62-dev_1.62.0+dfsg-4build3_amd64.deb ...\n","Unpacking libboost1.62-dev:amd64 (1.62.0+dfsg-4build3) ...\n","dpkg: error processing archive /tmp/apt-dpkg-install-l3W1tA/07-libboost1.62-dev_1.62.0+dfsg-4build3_amd64.deb (--unpack):\n"," corrupted filesystem tarfile - corrupted package archive\n","dpkg-deb: error: subprocess paste was killed by signal (Broken pipe)\n","Selecting previously unselected package libboost-python1.62.0.\n","Preparing to unpack .../08-libboost-python1.62.0_1.62.0+dfsg-4build3_amd64.deb ...\n","Unpacking libboost-python1.62.0 (1.62.0+dfsg-4build3) ...\n","Selecting previously unselected package libboost-python1.62-dev.\n","Preparing to unpack .../09-libboost-python1.62-dev_1.62.0+dfsg-4build3_amd64.deb ...\n","Unpacking libboost-python1.62-dev (1.62.0+dfsg-4build3) ...\n","Selecting previously unselected package libboost-python-dev.\n","Preparing to unpack .../10-libboost-python-dev_1.62.0.1_amd64.deb ...\n","Unpacking libboost-python-dev (1.62.0.1) ...\n","Selecting previously unselected package liblcms2-2:amd64.\n","Preparing to unpack .../11-liblcms2-2_2.7-1ubuntu1_amd64.deb ...\n","Unpacking liblcms2-2:amd64 (2.7-1ubuntu1) ...\n","Selecting previously unselected package libpython-all-dev:amd64.\n","Preparing to unpack .../12-libpython-all-dev_2.7.14-2ubuntu1_amd64.deb ...\n","Unpacking libpython-all-dev:amd64 (2.7.14-2ubuntu1) ...\n","Selecting previously unselected package libtiff5:amd64.\n","Preparing to unpack .../13-libtiff5_4.0.8-5ubuntu0.1_amd64.deb ...\n","Unpacking libtiff5:amd64 (4.0.8-5ubuntu0.1) ...\n","Selecting previously unselected package libwebp6:amd64.\n","Preparing to unpack .../14-libwebp6_0.6.0-3_amd64.deb ...\n","Unpacking libwebp6:amd64 (0.6.0-3) ...\n","Selecting previously unselected package libwebpmux3:amd64.\n","Preparing to unpack .../15-libwebpmux3_0.6.0-3_amd64.deb ...\n","Unpacking libwebpmux3:amd64 (0.6.0-3) ...\n","Selecting previously unselected package python-all.\n","Preparing to unpack .../16-python-all_2.7.14-2ubuntu1_amd64.deb ...\n","Unpacking python-all (2.7.14-2ubuntu1) ...\n","Selecting previously unselected package python-all-dev.\n","Preparing to unpack .../17-python-all-dev_2.7.14-2ubuntu1_amd64.deb ...\n","Unpacking python-all-dev (2.7.14-2ubuntu1) ...\n","Selecting previously unselected package python-asn1crypto.\n","Preparing to unpack .../18-python-asn1crypto_0.22.0-1_all.deb ...\n","Unpacking python-asn1crypto (0.22.0-1) ...\n","Selecting previously unselected package python-cffi-backend.\n","Preparing to unpack .../19-python-cffi-backend_1.9.1-2build2_amd64.deb ...\n","Unpacking python-cffi-backend (1.9.1-2build2) ...\n","Selecting previously unselected package python-crypto.\n","Preparing to unpack .../20-python-crypto_2.6.1-7ubuntu0.1_amd64.deb ...\n","Unpacking python-crypto (2.6.1-7ubuntu0.1) ...\n","Selecting previously unselected package python-enum34.\n","Preparing to unpack .../21-python-enum34_1.1.6-1_all.deb ...\n","Unpacking python-enum34 (1.1.6-1) ...\n","Selecting previously unselected package python-idna.\n","Preparing to unpack .../22-python-idna_2.5-1_all.deb ...\n","Unpacking python-idna (2.5-1) ...\n","Selecting previously unselected package python-ipaddress.\n","Preparing to unpack .../23-python-ipaddress_1.0.17-1_all.deb ...\n","Unpacking python-ipaddress (1.0.17-1) ...\n","Selecting previously unselected package python-six.\n","Preparing to unpack .../24-python-six_1.10.0-4_all.deb ...\n","Unpacking python-six (1.10.0-4) ...\n","Selecting previously unselected package python-cryptography.\n","Preparing to unpack .../25-python-cryptography_1.9-1_amd64.deb ...\n","Unpacking python-cryptography (1.9-1) ...\n","Selecting previously unselected package python-dbus.\n","Preparing to unpack .../26-python-dbus_1.2.4-1build3_amd64.deb ...\n","Unpacking python-dbus (1.2.4-1build3) ...\n","Selecting previously unselected package python-decorator.\n","Preparing to unpack .../27-python-decorator_4.1.1-1_all.deb ...\n","Unpacking python-decorator (4.1.1-1) ...\n","Selecting previously unselected package python-gi.\n","Preparing to unpack .../28-python-gi_3.24.1-2build1_amd64.deb ...\n","Unpacking python-gi (3.24.1-2build1) ...\n","Selecting previously unselected package python-olefile.\n","Preparing to unpack .../29-python-olefile_0.44-1_all.deb ...\n","Unpacking python-olefile (0.44-1) ...\n","Selecting previously unselected package python-pil:amd64.\n","Preparing to unpack .../30-python-pil_4.1.1-3build2_amd64.deb ...\n","Unpacking python-pil:amd64 (4.1.1-3build2) ...\n","Selecting previously unselected package python-imaging.\n","Preparing to unpack .../31-python-imaging_4.1.1-3build2_all.deb ...\n","Unpacking python-imaging (4.1.1-3build2) ...\n"],"name":"stdout"},{"output_type":"stream","text":["Selecting previously unselected package python-secretstorage.\r\n","Preparing to unpack .../32-python-secretstorage_2.3.1-2_all.deb ...\n","Unpacking python-secretstorage (2.3.1-2) ...\n","Selecting previously unselected package python-keyring.\n","Preparing to unpack .../33-python-keyring_10.4.0-1_all.deb ...\n","Unpacking python-keyring (10.4.0-1) ...\n","Selecting previously unselected package python-keyrings.alt.\n","Preparing to unpack .../34-python-keyrings.alt_2.2-2_all.deb ...\n","Unpacking python-keyrings.alt (2.2-2) ...\n","Selecting previously unselected package python-numpy.\n","Preparing to unpack .../35-python-numpy_1%3a1.12.1-3.1ubuntu4_amd64.deb ...\n","Unpacking python-numpy (1:1.12.1-3.1ubuntu4) ...\n","Selecting previously unselected package python-pip-whl.\n","Preparing to unpack .../36-python-pip-whl_9.0.1-2_all.deb ...\n","Unpacking python-pip-whl (9.0.1-2) ...\n","Selecting previously unselected package python-pip.\n","Preparing to unpack .../37-python-pip_9.0.1-2_all.deb ...\n","Unpacking python-pip (9.0.1-2) ...\n","Selecting previously unselected package python-pkg-resources.\n","Preparing to unpack .../38-python-pkg-resources_36.2.7-2_all.deb ...\n","Unpacking python-pkg-resources (36.2.7-2) ...\n","Selecting previously unselected package python-setuptools.\n","Preparing to unpack .../39-python-setuptools_36.2.7-2_all.deb ...\n","Unpacking python-setuptools (36.2.7-2) ...\n","Selecting previously unselected package python-wheel.\n","Preparing to unpack .../40-python-wheel_0.29.0-2_all.deb ...\n","Unpacking python-wheel (0.29.0-2) ...\n","Selecting previously unselected package python-xdg.\n","Preparing to unpack .../41-python-xdg_0.25-4_all.deb ...\n","Unpacking python-xdg (0.25-4) ...\n","Selecting previously unselected package python-scipy.\n","Preparing to unpack .../42-python-scipy_0.18.1-2ubuntu5_amd64.deb ...\n","Unpacking python-scipy (0.18.1-2ubuntu5) ...\n","Errors were encountered while processing:\n"," /tmp/apt-dpkg-install-l3W1tA/07-libboost1.62-dev_1.62.0+dfsg-4build3_amd64.deb\n","E: Sub-process /usr/bin/dpkg returned an error code (1)\n"],"name":"stdout"}]},{"metadata":{"id":"YJKo6S4GLMlB","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":340},"outputId":"029b3d15-7851-4da4-e88f-4e08ba584adb","executionInfo":{"status":"ok","timestamp":1529932088727,"user_tz":-330,"elapsed":10284,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!pip install nibabel pydicom medpy"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting nibabel\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d9/f0/008aa42c3bd42d101cfcd5418643364a4b3dd2322de3e8b3d6c644ae0fb0/nibabel-2.3.0.tar.gz (4.2MB)\n","\u001b[K    100% |████████████████████████████████| 4.2MB 6.9MB/s \n","\u001b[?25hCollecting pydicom\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/56/e1/7185572caa15620decf8d7f9492f7406ac221f878cc82e922fc36a0e5aac/pydicom-1.1.0-1-py2.py3-none-any.whl (6.7MB)\n","\u001b[K    100% |████████████████████████████████| 6.7MB 4.1MB/s \n","\u001b[?25hCollecting medpy\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/23/62/b01a85e766a7d04cf1c93b6bc94aca1530c9fe038154d1a6095fcacc1be8/MedPy-0.3.0.tar.gz (163kB)\n","\u001b[K    100% |████████████████████████████████| 163kB 24.1MB/s \n","\u001b[?25hRequirement already satisfied: scipy>=0.9.0 in /usr/local/lib/python2.7/dist-packages (from medpy) (0.19.1)\n","Requirement already satisfied: numpy>=1.6.1 in /usr/local/lib/python2.7/dist-packages (from medpy) (1.14.5)\n","Building wheels for collected packages: nibabel, medpy\n","  Running setup.py bdist_wheel for nibabel ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \bdone\n","\u001b[?25h  Stored in directory: /content/.cache/pip/wheels/7e/97/9b/7cf05225afac39de2dacef758fc06c0c0bdf3e6efb40fabb9c\n","  Running setup.py bdist_wheel for medpy ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \b-\b \bdone\n","\u001b[?25h  Stored in directory: /content/.cache/pip/wheels/6f/c0/44/15d33190c8b7b3eaa39677e9830646fac3a125ac840d17cc86\n","Successfully built nibabel medpy\n","Installing collected packages: nibabel, pydicom, medpy\n","Successfully installed medpy-0.3.0 nibabel-2.3.0 pydicom-1.1.0\n"],"name":"stdout"}]},{"metadata":{"id":"iOm-_VGxLN5B","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!pip install -U -q PyDrive ## you will have to install for every colab session\n","\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","\n","# 1. Authenticate and create the PyDrive client.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","\n","\n","opp_import = drive.CreateFile({'id':'1Ot3sM9CvdfYB3XbHMYAMOtPsrWqir0xY'})\n","opp_import.GetContentFile('MRI_Portal_Hepatic_Utkarsh.zip')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"HhWETWkDLRD0","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":102},"outputId":"29d446a6-b68e-4a69-ac84-fd4a85bcd72d","executionInfo":{"status":"ok","timestamp":1529932121706,"user_tz":-330,"elapsed":4800,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!unzip MRI_Portal_Hepatic_Utkarsh.zip"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Archive:  MRI_Portal_Hepatic_Utkarsh.zip\n","  inflating: Portal_Vein_Truth.mha   \n","  inflating: Porte_Vein_Liver.mha    \n","  inflating: Vein_Sus_Hepatic_Liver.mha  \n","  inflating: Vein_Sus_Hepatic_Truth.mha  \n"],"name":"stdout"}]},{"metadata":{"id":"2nPn0bjuLTfu","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":68},"outputId":"2a013273-bcf9-4772-991e-4c887b919e26","executionInfo":{"status":"ok","timestamp":1529932126319,"user_tz":-330,"elapsed":1829,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!ls"],"execution_count":5,"outputs":[{"output_type":"stream","text":["datalab\t\t\t\tPorte_Vein_Liver.mha\r\n","MRI_Portal_Hepatic_Utkarsh.zip\tVein_Sus_Hepatic_Liver.mha\r\n","Portal_Vein_Truth.mha\t\tVein_Sus_Hepatic_Truth.mha\r\n"],"name":"stdout"}]},{"metadata":{"id":"y0c4EVHNL1jE","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":408},"outputId":"0abbefde-2d10-4dc0-c05c-9150ae23cde4","executionInfo":{"status":"ok","timestamp":1529932166320,"user_tz":-330,"elapsed":36824,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!pip install itk"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Collecting itk\n","  Downloading https://files.pythonhosted.org/packages/56/39/1420c149ca5501a855bd72ff15232c42589b12b4534641255c9f2ab966a2/itk-4.13.0-cp27-cp27mu-manylinux1_x86_64.whl\n","Requirement already satisfied: numpy in /usr/local/lib/python2.7/dist-packages (from itk) (1.14.5)\n","Collecting itk-segmentation (from itk)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/95/b7/cb7fd18045420650e1390247d1371a76e15d9294ac1c143f4a5f9e84606f/itk_segmentation-4.13.0-cp27-cp27mu-manylinux1_x86_64.whl (5.8MB)\n","\u001b[K    100% |████████████████████████████████| 5.8MB 4.2MB/s \n","\u001b[?25hCollecting itk-registration (from itk)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b0/32/5ff6361a18a13841bfe12511a45bfee957f9a2cf367167729d3fd6c0e10f/itk_registration-4.13.0-cp27-cp27mu-manylinux1_x86_64.whl (4.4MB)\n","\u001b[K    100% |████████████████████████████████| 4.4MB 10.8MB/s \n","\u001b[?25hCollecting itk-filtering (from itk)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b1/ad/1ebbbee383d8d98d900ab0558e5524329341be2a1f7916194cca0d4db041/itk_filtering-4.13.0-cp27-cp27mu-manylinux1_x86_64.whl (37.8MB)\n","\u001b[K    100% |████████████████████████████████| 37.8MB 649kB/s \n","\u001b[?25hCollecting itk-core (from itk)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1f/51/b13658086700f8aace17889d9e4d892a463f04f6100209a0915a598c592e/itk_core-4.13.0-cp27-cp27mu-manylinux1_x86_64.whl (25.8MB)\n","\u001b[K    100% |████████████████████████████████| 25.8MB 1.7MB/s \n","\u001b[?25hCollecting itk-io (from itk)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/27/5f/00b52a07a98093fe2eb636c244a0995ac87c6c098f4384edd9256aa72559/itk_io-4.13.0-cp27-cp27mu-manylinux1_x86_64.whl (8.9MB)\n","\u001b[K    100% |████████████████████████████████| 8.9MB 5.9MB/s \n","\u001b[?25hCollecting itk-numerics (from itk)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/5b/09/38e49b84be50201ca84d464ec620dc706f809483f24de7e5cb54d02cbbed/itk_numerics-4.13.0-cp27-cp27mu-manylinux1_x86_64.whl (30.4MB)\n","\u001b[K    100% |████████████████████████████████| 30.4MB 1.7MB/s \n","\u001b[?25hInstalling collected packages: itk-core, itk-numerics, itk-filtering, itk-segmentation, itk-registration, itk-io, itk\n","Successfully installed itk-4.13.0 itk-core-4.13.0 itk-filtering-4.13.0 itk-io-4.13.0 itk-numerics-4.13.0 itk-registration-4.13.0 itk-segmentation-4.13.0\n"],"name":"stdout"}]},{"metadata":{"id":"_G51HJdzYb3B","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":68},"outputId":"1bae402a-9c0a-43e1-f169-0d26d6c6fdfc","executionInfo":{"status":"ok","timestamp":1529932186307,"user_tz":-330,"elapsed":1630,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!ls"],"execution_count":7,"outputs":[{"output_type":"stream","text":["datalab\t\t\t\tPorte_Vein_Liver.mha\r\n","MRI_Portal_Hepatic_Utkarsh.zip\tVein_Sus_Hepatic_Liver.mha\r\n","Portal_Vein_Truth.mha\t\tVein_Sus_Hepatic_Truth.mha\r\n"],"name":"stdout"}]},{"metadata":{"id":"1NubOAiyLUEU","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from medpy.io import load\n","image_data, image_header = load('Vein_Sus_Hepatic_Liver.mha')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"6h4z4XBzYe4m","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["truth_image_data, truth_image_header = load('Vein_Sus_Hepatic_Truth.mha')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"swMXHYF5MDty","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"38d61c7b-0d04-49b0-e06d-5cec733ee15f","executionInfo":{"status":"ok","timestamp":1529932211378,"user_tz":-330,"elapsed":677,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["image_data.shape"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1548, 925, 64)"]},"metadata":{"tags":[]},"execution_count":10}]},{"metadata":{"id":"G0Mmv9CBYv_Y","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"c5a58e59-02a1-4aec-f997-724e610ed132","executionInfo":{"status":"ok","timestamp":1529932213080,"user_tz":-330,"elapsed":693,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["truth_image_data.shape"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1548, 925, 64)"]},"metadata":{"tags":[]},"execution_count":11}]},{"metadata":{"id":"QBiW6iWENzn7","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"1de92626-6198-4407-af43-455a810f9eb3","executionInfo":{"status":"ok","timestamp":1529932216269,"user_tz":-330,"elapsed":719,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["type(image_data)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{"tags":[]},"execution_count":12}]},{"metadata":{"id":"iIDSB-igMKs7","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"17262717-96dc-4856-e1fd-c43682f80bd9","executionInfo":{"status":"ok","timestamp":1529932217861,"user_tz":-330,"elapsed":622,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["image_data.dtype"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype('int16')"]},"metadata":{"tags":[]},"execution_count":13}]},{"metadata":{"id":"9h4ct7UaEWSK","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!mkdir Vein_Sus_Hepatic_Liver"],"execution_count":0,"outputs":[]},{"metadata":{"id":"P5lpeae6EZ-h","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!mkdir Vein_Sus_Hepatic_Truth"],"execution_count":0,"outputs":[]},{"metadata":{"id":"EmjTzX_nEhaH","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import pylab"],"execution_count":0,"outputs":[]},{"metadata":{"id":"MqNYlgdaEQi6","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":3281},"outputId":"21f3aa19-44ed-4912-ae88-dc23f3b36017","executionInfo":{"status":"ok","timestamp":1529939356373,"user_tz":-330,"elapsed":15685,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["for i in range(0,64):\n","  print(i)\n","  # ImageFile=pydicom.read_file(\"./3Dircadb1.\"+str(i)+\"/PATIENT_DICOM/image_\"+str(j))\n","  pylab.imsave(\"Vein_Sus_Hepatic_Liver/\"+str(i)+\".png\",image_data[:,:,i],cmap=pylab.cm.bone)\n","  print(i,\"saved image\")\n","  # train_data_gt.append(\"./3Dircadb1.\"+str(i)+\"/MASKS_DICOM/venoussystem/image_\"+str(j))\n","  # ImageFile=pydicom.read_file(\"./3Dircadb1.\"+str(i)+\"/MASKS_DICOM/venoussystem/image_\"+str(j))\n","  pylab.imsave(\"Vein_Sus_Hepatic_Truth/\"+str(i)+\".png\",truth_image_data[:,:,i],cmap=pylab.cm.bone)\n","  print(i,\"saved label\")"],"execution_count":104,"outputs":[{"output_type":"stream","text":["0\n","(0, 'saved image')\n","(0, 'saved label')\n","1\n","(1, 'saved image')\n","(1, 'saved label')\n","2\n","(2, 'saved image')\n","(2, 'saved label')\n","3\n","(3, 'saved image')\n","(3, 'saved label')\n","4\n","(4, 'saved image')\n","(4, 'saved label')\n","5\n","(5, 'saved image')\n","(5, 'saved label')\n","6\n","(6, 'saved image')\n","(6, 'saved label')\n","7\n","(7, 'saved image')\n","(7, 'saved label')\n","8\n","(8, 'saved image')\n","(8, 'saved label')\n","9\n","(9, 'saved image')\n","(9, 'saved label')\n","10\n","(10, 'saved image')\n","(10, 'saved label')\n","11\n","(11, 'saved image')\n","(11, 'saved label')\n","12\n","(12, 'saved image')\n","(12, 'saved label')\n","13\n","(13, 'saved image')\n","(13, 'saved label')\n","14\n","(14, 'saved image')\n","(14, 'saved label')\n","15\n","(15, 'saved image')\n","(15, 'saved label')\n","16\n","(16, 'saved image')\n","(16, 'saved label')\n","17\n","(17, 'saved image')\n","(17, 'saved label')\n","18\n","(18, 'saved image')\n","(18, 'saved label')\n","19\n","(19, 'saved image')\n","(19, 'saved label')\n","20\n","(20, 'saved image')\n","(20, 'saved label')\n","21\n","(21, 'saved image')\n","(21, 'saved label')\n","22\n","(22, 'saved image')\n","(22, 'saved label')\n","23\n","(23, 'saved image')\n","(23, 'saved label')\n","24\n","(24, 'saved image')\n","(24, 'saved label')\n","25\n","(25, 'saved image')\n","(25, 'saved label')\n","26\n","(26, 'saved image')\n","(26, 'saved label')\n","27\n","(27, 'saved image')\n","(27, 'saved label')\n","28\n","(28, 'saved image')\n","(28, 'saved label')\n","29\n","(29, 'saved image')\n","(29, 'saved label')\n","30\n","(30, 'saved image')\n","(30, 'saved label')\n","31\n","(31, 'saved image')\n","(31, 'saved label')\n","32\n","(32, 'saved image')\n","(32, 'saved label')\n","33\n","(33, 'saved image')\n","(33, 'saved label')\n","34\n","(34, 'saved image')\n","(34, 'saved label')\n","35\n","(35, 'saved image')\n","(35, 'saved label')\n","36\n","(36, 'saved image')\n","(36, 'saved label')\n","37\n","(37, 'saved image')\n","(37, 'saved label')\n","38\n","(38, 'saved image')\n","(38, 'saved label')\n","39\n","(39, 'saved image')\n","(39, 'saved label')\n","40\n","(40, 'saved image')\n","(40, 'saved label')\n","41\n","(41, 'saved image')\n","(41, 'saved label')\n","42\n","(42, 'saved image')\n","(42, 'saved label')\n","43\n","(43, 'saved image')\n","(43, 'saved label')\n","44\n","(44, 'saved image')\n","(44, 'saved label')\n","45\n","(45, 'saved image')\n","(45, 'saved label')\n","46\n","(46, 'saved image')\n","(46, 'saved label')\n","47\n","(47, 'saved image')\n","(47, 'saved label')\n","48\n","(48, 'saved image')\n","(48, 'saved label')\n","49\n","(49, 'saved image')\n","(49, 'saved label')\n","50\n","(50, 'saved image')\n","(50, 'saved label')\n","51\n","(51, 'saved image')\n","(51, 'saved label')\n","52\n","(52, 'saved image')\n","(52, 'saved label')\n","53\n","(53, 'saved image')\n","(53, 'saved label')\n","54\n","(54, 'saved image')\n","(54, 'saved label')\n","55\n","(55, 'saved image')\n","(55, 'saved label')\n","56\n","(56, 'saved image')\n","(56, 'saved label')\n","57\n","(57, 'saved image')\n","(57, 'saved label')\n","58\n","(58, 'saved image')\n","(58, 'saved label')\n","59\n","(59, 'saved image')\n","(59, 'saved label')\n","60\n","(60, 'saved image')\n","(60, 'saved label')\n","61\n","(61, 'saved image')\n","(61, 'saved label')\n","62\n","(62, 'saved image')\n","(62, 'saved label')\n","63\n","(63, 'saved image')\n","(63, 'saved label')\n"],"name":"stdout"}]},{"metadata":{"id":"7sCeFMMNXs1v","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"metadata":{"id":"QaapBN4kcJsc","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import numpy as np\n","# np.dstack((image_data[:,:,48],image_data[:,:,48],image_data[:,:,48])).shape"],"execution_count":0,"outputs":[]},{"metadata":{"id":"UAaJx7HANqLX","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from skimage.io import imread\n","import os\n","from glob import glob"],"execution_count":0,"outputs":[]},{"metadata":{"id":"N9H8GQ1XNuyw","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["# BASE_IMAGE_PATH = os.path.join('.,','input')\n","BASE_IMAGE_PATH = 'Vein_Sus_Hepatic_Liver'\n","BASE_MASK_PATH = 'Vein_Sus_Hepatic_Truth'\n","all_images = sorted(glob(os.path.join(BASE_IMAGE_PATH, '*.png')))\n","# all_masks = ['_masks'.join(c_file.split('_images')) for c_file in all_images]\n","all_masks = sorted(glob(os.path.join(BASE_MASK_PATH, '*.png')))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dP1xdyd9OSw7","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":85},"outputId":"13863962-75f9-43d6-b26b-5b4746fe8374","executionInfo":{"status":"ok","timestamp":1529939516706,"user_tz":-330,"elapsed":787,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["print(all_images[60])\n","print(len(all_images))\n","print(all_masks[60])\n","print(len(all_masks))"],"execution_count":106,"outputs":[{"output_type":"stream","text":["Vein_Sus_Hepatic_Liver/63.png\n","64\n","Vein_Sus_Hepatic_Truth/63.png\n","64\n"],"name":"stdout"}]},{"metadata":{"id":"3zXSMWzXOinZ","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":320},"outputId":"b64c8f47-273e-4d41-ad21-bbb3fa2882b3","executionInfo":{"status":"ok","timestamp":1529939534098,"user_tz":-330,"elapsed":1497,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["test_image = imread(all_images[40])\n","test_mask = imread(all_masks[40])\n","print(test_mask.shape)\n","print(all_masks[40])\n","fig, (ax1, ax2) = plt.subplots(1,2)\n","# fig.set_size_inches(18.5, 10.5)\n","ax1.imshow(test_image)\n","ax2.imshow(test_mask)"],"execution_count":107,"outputs":[{"output_type":"stream","text":["(1548, 925, 4)\n","Vein_Sus_Hepatic_Truth/45.png\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fda08dc3e10>"]},"metadata":{"tags":[]},"execution_count":107},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7fda08e9c3d0>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"tLos1HJKMaQC","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":651},"outputId":"e2473d84-10d4-4781-856c-dae05e26ec5f","executionInfo":{"status":"ok","timestamp":1529567255821,"user_tz":-330,"elapsed":1538,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["fig, (ax1, ax2) = plt.subplots(1,2)\n","fig.set_size_inches(18.5, 10.5)\n","# ax3.imshow(X_test[1])\n","ax1.grid(False)\n","ax2.grid(False)\n","ax1.imshow(image_data[:,:,48])\n","# ax1.imshow(np.dstack((image_data[:,:,48],image_data[:,:,48],image_data[:,:,48])))\n","ax1.set_title('Liver')\n","ax2.imshow(truth_image_data[:,:,48])\n","ax2.set_title('Truth')"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5,1,u'Truth')"]},"metadata":{"tags":[]},"execution_count":16},{"output_type":"display_data","data":{"image/png":"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\nSqWwv6qF4Ha7HcJWvFdtXHWM//dgVUtfkbVgaEHW/o6rsb6y6wOzf9w4qMZrf+OJx/Ftfei01yWf\nz4fXIQ6v456vnwLt99SN9+/1Q6L8xGNJ6na7arfbGg6HKhaLYV1tv9/XsWPHJEmf+MQnNDMzs+V5\n4KyhQgucXXyWAYDttf0V2iRJqpK+Kul/lfSPkq6XNCXpfklvSNO0kyTJ6yVdLWko6YNpmv75Y3lM\nTIZOp6O3v/3tarfbmYBqISseVOQnAsfTfX049JOE/d92DF9dtWMYH0b9ZfFaUn9cP0DK+ABuoS5u\nW47XmMZrT33Lsd3eB1cfNO32/nJ/7vHr4lupbWiVHcsPn/LHPVWbdXyM+PX07dO2/tiH6+FwqEKh\noHa7rWuuuUZ/8Ad/8HC/OgBwVvFZBgAm29Y+xkfntyQdO/nzf5L0x2ma/ntJ35L0M0mS1CX9R0kv\nkvRCSb+cJMnCY3xMnOduv/12vfnNb9add96p73znOyEEWQC0ycXlclnlcjlsy2P/ttBrwcgqguMC\noF8TalVfvyZUylY9fTg7VXeCH5Lk7+8f24deq2767YDsfv75FotFlUollctlVatVVSqVzPP3Fc84\nRPthVPYc4zW/8XY+fnCWD+b+um63G6ZFdzqd8Lr5NmP/XOJztT/x+2evs6SwzvjLX/6y3v72t2/H\nrxgAbCc+ywDABDvtCm2SJE+S9BRJ//fJi14o6edO/vwJSb8qKZV0a5qmyyfv83lJzzt5PS4whw8f\n1h/90R/p9ttvV6fTyawh9e2xfnseu8y37PqwapU+u9wHOWv7tWm8vk05nvTrg5xfA+oDm91OUhhG\nZfcfDAZh/a4F7G63G25vlci4pdmL9531g5r8eUnZQOuDqr/O9u615xFPIvZhf9x6W99ifKote+z1\n9pOPbf2vnYsd20K1H+rlB2n1ej198Ytf1G/91m/pN3/zN1WtVh/uVwoAzig+ywDA5HssFdr/XdJb\n3b/raZp2Tv78oKS9kvZIOuxuY5fjAvPlL39ZH/zgB/Xtb39b3W73lKHOhygfnuLKoVU8rera6XTU\narXU6/UyldM4QPrKox8g5W9rwctCa6lUCoOM/G1KpZKq1Wqopo5rL/ZBOm6LtnOJK532fG19b6vV\nCs/NztlvSWR/+yqrrSdutVpqt9vqdrtb9pn15+j/+IqyP0d/mX+8uBLun6cPzL7N27/H/ouFbrer\n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\nhuNJw77919aDWuurbd/SbDZDddSCnrXbWpC1UOynEMfhLm4jtpBkVcA43MR7uvr2Vh9YLfjZfeIp\nwj6oSgqvhd2v1+up1Wqp1WqF52fGBXELaPV6XY1GI+xf64dc+aqxPb5f82vP1YfqeBsl/zysldhX\njf2XANby3W63M1vu2PvhJ0Ebf/z4udrzsS8XKpVKZoKyfXkRh2Jf5be/C4WCXvCCF+hnf/ZnM23U\nAAAAwKNBoN1BrMU4HvRjLORaQLKQ6tfN+hZcH8qsWmuByVqN7RgWjH3l1NZ1+uP59Zl+Xa7frsZC\nlg+g8fPwg5/scfyxrIJsoVzaHIxkLbq2Z69vU/bVUR+s7bUrl8uqVCoql8uSlAm0diy/9jYeGOVb\nln311Q/l8q3TPvTaFwp+71jbE9d+jtuw/ZppC7rjWqF9W3Uul1O32w3vpw2uil/7eICY/x1rNBr6\n6Z/+6S3XAQAAAI8GgXYHmZ6e1vT0tDqdTmYfV1+hGwwGIaD4Sp6fcJzP51Wv18NtrLrq121aeMrl\nciqVSmHQUS6Xy9zeTzr25+CnGcehNV5D6odT+RZXH+L8/rBStr3WXoNer6d2u621tTU1m021Wq3w\nGpRKpRAWLSTbOVmIbTQaajQa4fWLt9HJ5/MhLMdThOPH8GEwXpfrr/Nrb33AtiFPFqKND65+gJUd\ny/ODpvxrbe+5BXK//jg2LrBfccUVestb3hIq0nabyy+/nHZjAAAAPCoE2h3kmc98pr7xjW/oK1/5\nSmb7FQstvqJn60wtPPk1pvV6PVQKe72e1tfXtba2tmULnFKplAlNfm2nbVPjQ52fDGytq1aptSDp\nt4SRFNb3WnU0HuokKRPy/HpYf39rcbY9Ye3c4mPY6+L3py2Xy5qZmVGj0VCtVtNwOAyh1bds23O0\nirZfcxoHVkmZaq6fUO0rxtYKbtfZFwFWfbbztvXS/nWzP/a+SNqy7tVvC2Svg/1s5+/XKcdDsvyE\n5AMHDmjXrl26+uqrw/UWZq1FGwAAAHg0CLQ7SC6X0+Lioi6++OJQCet2u2o2myGc+FbidrudGQxl\nwbRWq6lSqYT7W1hst9uZyqSFNwvOVp3sdrthbaqvUPo/vlXXApIFuFKplFlz61t9LfhaYM3n86EF\n2KqKzWYzE6Tq9XpYt2ph07c+SwpVWT8Qyp+PvT6SwuP4MGnh3vb/7Xa74d/2PCxcxtXrcVsaxecR\n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\nmZubaxo/Xbx4MRcvXmymHJc1szfffHPOnTuXjY0NFVoAAODACLTXgel0mqeffjpf+MIX8sADD2R1\ndTW9Xi+z2SzT6TRzc3OZn5/PwsJC85q5ubmsra3l4sWL2djYSJI89dRTWV9fz2AwyGAw2HY+AADA\nfhNoj7CNjY2sra3lqaeeysc//vGcOXNmWxjd2NhIr9fL8vJyjh8/ntFolOl0mtXV1WxsbOT8+fNZ\nW1vLwsJCxuNxLl68mMlkkl6vl16v1wRdAACAgyDQHiGl4pqk2YrniSeeyJkzZ3Lx4sVMp9NMp9Mm\nyJYpxDfddFOWlpaSJE8//XQTatfW1rK+vp7pdJrxeJwkTRfkhYWFTCaTzGazA/t5AQCA65tAewSU\nUDmdTnPp0qVsbGzkgQceyMWLF7OyspKnnnoqFy9ezNraWsbjcWazWbMlz6lTp3LDDTdkMBhkZWUl\ns9ks4/G46Xa8srLShNpS2Z1MJs1DoAUAAA6KQNtRpXHTZDLJ2tpaM0X4D//wD3Pu3LmcO3cuFy9e\nzHg8zmQyycLCQnq9XobDYfr9fpaWlnLs2LGcPn06o9Fo2/uWJlCz2WxbcF1YWGieW19fT7/fz/z8\n/AHeBQAA4Hom0HZImTJcAuWTTz6Z8Xicp59+Oqurq3n44Yfz6KOP5vz583n88cdz4cKFjMfjTKfT\n9Pv9jEajnDhxIidPnmzWwZbpxUkymUyasFuaRo3H42atbHv97fz8fG699dYcO3bsIG8JAABwHRNo\nO6CEyieeeCKPPvpoer1eLl++nAcffDAnT55Mv9/PyspKzp07l8uXL2d9fT3JZqfisq3OdDptqq1l\nTWxp/tTr9Zpz+/1+FhYWMhqNMpvNsr6+3jSQGg6HTdB92ctepssxAABwoATaDnj66aezsrKSj33s\nY/nwhz+c5eXlLC4uZmlpqek6vL6+nsuXL2cymWRjY6OZYjybzTKbzZpgW6Ypl9Bbzp2fn89gMGia\nRSVppignm1ORB4NB5ubmMp1Oc8899zTPAQAAHASB9hAqjZbOnz+fCxcu5Fd/9Vfz+c9/PhsbG+n3\n+01ltaxxnZ+fz3Q6zcrKSjY2NppK69LSUtPcqUw9Xl1dzXA4zGAwaNbhlj1o5+bmsrCw0FRmy3uP\nRqPm+fF4nPX19bzsZS9Lv98/4DsFAABczwTaQ6SsVX3ooYcynU7z+7//+/n0pz+d1dXVpvJa1s/O\n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\ndDfoIgAAAABJRU5ErkJggg==\n","text/plain":["<matplotlib.figure.Figure at 0x7f863ccbc850>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"gWvg1JA7drFz","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":68},"outputId":"4084d0ec-4946-4c3a-fffb-536dad9f981e","executionInfo":{"status":"ok","timestamp":1529935101717,"user_tz":-330,"elapsed":23075,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!curl https://transfer.sh/14xNCX/unet_final.h5 -o model.h5"],"execution_count":41,"outputs":[{"output_type":"stream","text":["  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","100  396M  100  396M    0     0  18.8M      0  0:00:21  0:00:21 --:--:-- 48.1M\n"],"name":"stdout"}]},{"metadata":{"id":"l65zaOp8dxtP","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":187},"outputId":"35e44abf-d3e6-4b11-d491-04dd6ea6bfe7","executionInfo":{"status":"ok","timestamp":1529935116382,"user_tz":-330,"elapsed":1652,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!ls -lh"],"execution_count":42,"outputs":[{"output_type":"stream","text":["total 905M\r\n","drwxr-xr-x 1 root root 4.0K Jun 25 13:08 datalab\r\n","-rw-r--r-- 1 root root 397M Jun 25 13:58 model.h5\r\n","-rw-r--r-- 1 root root  15M Jun 25 13:08 MRI_Portal_Hepatic_Utkarsh.zip\r\n","-rwxrwxrwx 1 root root  48M Jan 10 16:35 Portal_Vein_Truth.mha\r\n","-rwxrwxrwx 1 root root  96M Jan 23 15:46 Porte_Vein_Liver.mha\r\n","drwxr-xr-x 2 root root 4.0K Jun 25 13:14 Vein_Sus_Hepatic_Liver\r\n","-rwxrwxrwx 1 root root 175M Jan 25 14:00 Vein_Sus_Hepatic_Liver.mha\r\n","drwxr-xr-x 2 root root 4.0K Jun 25 13:14 Vein_Sus_Hepatic_Truth\r\n","-rwxrwxrwx 1 root root 175M Jan 25 14:13 Vein_Sus_Hepatic_Truth.mha\r\n"],"name":"stdout"}]},{"metadata":{"id":"UVmFePH6eKfs","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"ec4efc35-c144-47eb-c58f-d3165f7a99e9","executionInfo":{"status":"ok","timestamp":1529935341558,"user_tz":-330,"elapsed":13223,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["####################### petrosgk #################\n","from keras.losses import binary_crossentropy\n","import keras.backend as K\n","\n","\n","def dice_coeff(y_true, y_pred):\n","    smooth = 1.\n","    y_true_f = K.flatten(y_true)\n","    y_pred_f = K.flatten(y_pred)\n","    intersection = K.sum(y_true_f * y_pred_f)\n","    score = (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n","    return score\n","\n","\n","def dice_loss(y_true, y_pred):\n","    loss = 1 - dice_coeff(y_true, y_pred)\n","    return loss\n","\n","\n","def bce_dice_loss(y_true, y_pred):\n","    loss = binary_crossentropy(y_true, y_pred) + dice_loss(y_true, y_pred)\n","    return loss\n","\n","\n","def weighted_dice_coeff(y_true, y_pred, weight):\n","    smooth = 1.\n","    w, m1, m2 = weight * weight, y_true, y_pred\n","    intersection = (m1 * m2)\n","    score = (2. * K.sum(w * intersection) + smooth) / (K.sum(w * m1) + K.sum(w * m2) + smooth)\n","    return score\n","\n","\n","def weighted_dice_loss(y_true, y_pred):\n","    y_true = K.cast(y_true, 'float32')\n","    y_pred = K.cast(y_pred, 'float32')\n","    # if we want to get same size of output, kernel size must be odd number\n","    if K.int_shape(y_pred)[1] == 128:\n","        kernel_size = 11\n","    elif K.int_shape(y_pred)[1] == 256:\n","        kernel_size = 21\n","    elif K.int_shape(y_pred)[1] == 512:\n","        kernel_size = 21\n","    elif K.int_shape(y_pred)[1] == 1024:\n","        kernel_size = 41\n","    else:\n","        raise ValueError('Unexpected image size')\n","    averaged_mask = K.pool2d(\n","        y_true, pool_size=(kernel_size, kernel_size), strides=(1, 1), padding='same', pool_mode='avg')\n","    border = K.cast(K.greater(averaged_mask, 0.005), 'float32') * K.cast(K.less(averaged_mask, 0.995), 'float32')\n","    weight = K.ones_like(averaged_mask)\n","    w0 = K.sum(weight)\n","    weight += border * 2\n","    w1 = K.sum(weight)\n","    weight *= (w0 / w1)\n","    loss = 1 - weighted_dice_coeff(y_true, y_pred, weight)\n","    return loss\n","\n","\n","def weighted_bce_loss(y_true, y_pred, weight):\n","    # avoiding overflow\n","    epsilon = 1e-7\n","    y_pred = K.clip(y_pred, epsilon, 1. - epsilon)\n","    logit_y_pred = K.log(y_pred / (1. - y_pred))\n","\n","    # https://www.tensorflow.org/api_docs/python/tf/nn/weighted_cross_entropy_with_logits\n","    loss = (1. - y_true) * logit_y_pred + (1. + (weight - 1.) * y_true) * \\\n","                                          (K.log(1. + K.exp(-K.abs(logit_y_pred))) + K.maximum(-logit_y_pred, 0.))\n","    return K.sum(loss) / K.sum(weight)\n","\n","\n","def weighted_bce_dice_loss(y_true, y_pred):\n","    y_true = K.cast(y_true, 'float32')\n","    y_pred = K.cast(y_pred, 'float32')\n","    # if we want to get same size of output, kernel size must be odd number\n","    if K.int_shape(y_pred)[1] == 128:\n","        kernel_size = 11\n","    elif K.int_shape(y_pred)[1] == 256:\n","        kernel_size = 21\n","    elif K.int_shape(y_pred)[1] == 512:\n","        kernel_size = 21\n","    elif K.int_shape(y_pred)[1] == 1024:\n","        kernel_size = 41\n","    else:\n","        raise ValueError('Unexpected image size')\n","    averaged_mask = K.pool2d(\n","        y_true, pool_size=(kernel_size, kernel_size), strides=(1, 1), padding='same', pool_mode='avg')\n","    border = K.cast(K.greater(averaged_mask, 0.005), 'float32') * K.cast(K.less(averaged_mask, 0.995), 'float32')\n","    weight = K.ones_like(averaged_mask)\n","    w0 = K.sum(weight)\n","    weight += border * 2\n","    w1 = K.sum(weight)\n","    weight *= (w0 / w1)\n","    loss = weighted_bce_loss(y_true, y_pred, weight) + (1 - weighted_dice_coeff(y_true, y_pred, weight))\n","    return loss\n","  \n","  \n","from keras.models import Model\n","from keras.layers import Input, concatenate, Conv2D, MaxPooling2D, Activation, UpSampling2D, BatchNormalization\n","from keras.optimizers import RMSprop,Adam\n","\n","\n","def get_unet_128(input_shape=(128, 128, 3),\n","                 num_classes=1):\n","    inputs = Input(shape=input_shape)\n","    # 128\n","\n","    down1 = Conv2D(64, (3, 3), padding='same')(inputs)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1 = Conv2D(64, (3, 3), padding='same')(down1)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1_pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n","    # 64\n","\n","    down2 = Conv2D(128, (3, 3), padding='same')(down1_pool)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2 = Conv2D(128, (3, 3), padding='same')(down2)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2_pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n","    # 32\n","\n","    down3 = Conv2D(256, (3, 3), padding='same')(down2_pool)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3 = Conv2D(256, (3, 3), padding='same')(down3)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3_pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n","    # 16\n","\n","    down4 = Conv2D(512, (3, 3), padding='same')(down3_pool)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4 = Conv2D(512, (3, 3), padding='same')(down4)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4_pool = MaxPooling2D((2, 2), strides=(2, 2))(down4)\n","    # 8\n","\n","    center = Conv2D(1024, (3, 3), padding='same')(down4_pool)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    center = Conv2D(1024, (3, 3), padding='same')(center)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    # center\n","\n","    up4 = UpSampling2D((2, 2))(center)\n","    up4 = concatenate([down4, up4], axis=3)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    # 16\n","\n","    up3 = UpSampling2D((2, 2))(up4)\n","    up3 = concatenate([down3, up3], axis=3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    # 32\n","\n","    up2 = UpSampling2D((2, 2))(up3)\n","    up2 = concatenate([down2, up2], axis=3)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    # 64\n","\n","    up1 = UpSampling2D((2, 2))(up2)\n","    up1 = concatenate([down1, up1], axis=3)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    # 128\n","\n","    classify = Conv2D(num_classes, (1, 1), activation='sigmoid')(up1)\n","\n","    model = Model(inputs=inputs, outputs=classify)\n","\n","    model.compile(optimizer=RMSprop(lr=0.0001), loss=bce_dice_loss, metrics=[dice_coeff])\n","\n","    return model\n","\n","\n","def get_unet_256(input_shape=(256, 256, 3),\n","                 num_classes=1):\n","    inputs = Input(shape=input_shape)\n","    # 256\n","\n","    down0 = Conv2D(32, (3, 3), padding='same')(inputs)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0)\n","    # 128\n","\n","    down1 = Conv2D(64, (3, 3), padding='same')(down0_pool)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1 = Conv2D(64, (3, 3), padding='same')(down1)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1_pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n","    # 64\n","\n","    down2 = Conv2D(128, (3, 3), padding='same')(down1_pool)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2 = Conv2D(128, (3, 3), padding='same')(down2)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2_pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n","    # 32\n","\n","    down3 = Conv2D(256, (3, 3), padding='same')(down2_pool)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3 = Conv2D(256, (3, 3), padding='same')(down3)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3_pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n","    # 16\n","\n","    down4 = Conv2D(512, (3, 3), padding='same')(down3_pool)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4 = Conv2D(512, (3, 3), padding='same')(down4)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4_pool = MaxPooling2D((2, 2), strides=(2, 2))(down4)\n","    # 8\n","\n","    center = Conv2D(1024, (3, 3), padding='same')(down4_pool)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    center = Conv2D(1024, (3, 3), padding='same')(center)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    # center\n","\n","    up4 = UpSampling2D((2, 2))(center)\n","    up4 = concatenate([down4, up4], axis=3)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    # 16\n","\n","    up3 = UpSampling2D((2, 2))(up4)\n","    up3 = concatenate([down3, up3], axis=3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    # 32\n","\n","    up2 = UpSampling2D((2, 2))(up3)\n","    up2 = concatenate([down2, up2], axis=3)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    # 64\n","\n","    up1 = UpSampling2D((2, 2))(up2)\n","    up1 = concatenate([down1, up1], axis=3)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    # 128\n","\n","    up0 = UpSampling2D((2, 2))(up1)\n","    up0 = concatenate([down0, up0], axis=3)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    # 256\n","\n","    classify = Conv2D(num_classes, (1, 1), activation='sigmoid')(up0)\n","\n","    model = Model(inputs=inputs, outputs=classify)\n","\n","    model.compile(optimizer=RMSprop(lr=0.0001), loss=bce_dice_loss, metrics=[dice_coeff])\n","\n","    return model\n","\n","\n","def get_unet_512(input_shape=(512, 512, 3),\n","                 num_classes=1):\n","    inputs = Input(shape=input_shape)\n","    # 512\n","\n","    down0a = Conv2D(16, (3, 3), padding='same')(inputs)\n","    down0a = BatchNormalization()(down0a)\n","    down0a = Activation('relu')(down0a)\n","    down0a = Conv2D(16, (3, 3), padding='same')(down0a)\n","    down0a = BatchNormalization()(down0a)\n","    down0a = Activation('relu')(down0a)\n","    down0a_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0a)\n","    # 256\n","\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0a_pool)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0)\n","    # 128\n","\n","    down1 = Conv2D(64, (3, 3), padding='same')(down0_pool)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1 = Conv2D(64, (3, 3), padding='same')(down1)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1_pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n","    # 64\n","\n","    down2 = Conv2D(128, (3, 3), padding='same')(down1_pool)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2 = Conv2D(128, (3, 3), padding='same')(down2)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2_pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n","    # 32\n","\n","    down3 = Conv2D(256, (3, 3), padding='same')(down2_pool)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3 = Conv2D(256, (3, 3), padding='same')(down3)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3_pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n","    # 16\n","\n","    down4 = Conv2D(512, (3, 3), padding='same')(down3_pool)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4 = Conv2D(512, (3, 3), padding='same')(down4)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4_pool = MaxPooling2D((2, 2), strides=(2, 2))(down4)\n","    # 8\n","\n","    center = Conv2D(1024, (3, 3), padding='same')(down4_pool)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    center = Conv2D(1024, (3, 3), padding='same')(center)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    # center\n","\n","    up4 = UpSampling2D((2, 2))(center)\n","    up4 = concatenate([down4, up4], axis=3)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    # 16\n","\n","    up3 = UpSampling2D((2, 2))(up4)\n","    up3 = concatenate([down3, up3], axis=3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    # 32\n","\n","    up2 = UpSampling2D((2, 2))(up3)\n","    up2 = concatenate([down2, up2], axis=3)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    # 64\n","\n","    up1 = UpSampling2D((2, 2))(up2)\n","    up1 = concatenate([down1, up1], axis=3)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    # 128\n","\n","    up0 = UpSampling2D((2, 2))(up1)\n","    up0 = concatenate([down0, up0], axis=3)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    # 256\n","\n","    up0a = UpSampling2D((2, 2))(up0)\n","    up0a = concatenate([down0a, up0a], axis=3)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    # 512\n","\n","    classify = Conv2D(num_classes, (1, 1), activation='sigmoid')(up0a)\n","\n","    model = Model(inputs=inputs, outputs=classify)\n","\n","    model.compile(optimizer=Adam(lr=0.001), loss=bce_dice_loss, metrics=[dice_coeff])\n","\n","    return model\n","\n","\n","def get_unet_1024(input_shape=(1024, 1024, 3),\n","                  num_classes=1):\n","    inputs = Input(shape=input_shape)\n","    # 1024\n","\n","    down0b = Conv2D(8, (3, 3), padding='same')(inputs)\n","    down0b = BatchNormalization()(down0b)\n","    down0b = Activation('relu')(down0b)\n","    down0b = Conv2D(8, (3, 3), padding='same')(down0b)\n","    down0b = BatchNormalization()(down0b)\n","    down0b = Activation('relu')(down0b)\n","    down0b_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0b)\n","    # 512\n","\n","    down0a = Conv2D(16, (3, 3), padding='same')(down0b_pool)\n","    down0a = BatchNormalization()(down0a)\n","    down0a = Activation('relu')(down0a)\n","    down0a = Conv2D(16, (3, 3), padding='same')(down0a)\n","    down0a = BatchNormalization()(down0a)\n","    down0a = Activation('relu')(down0a)\n","    down0a_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0a)\n","    # 256\n","\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0a_pool)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0)\n","    # 128\n","\n","    down1 = Conv2D(64, (3, 3), padding='same')(down0_pool)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1 = Conv2D(64, (3, 3), padding='same')(down1)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1_pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n","    # 64\n","\n","    down2 = Conv2D(128, (3, 3), padding='same')(down1_pool)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2 = Conv2D(128, (3, 3), padding='same')(down2)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2_pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n","    # 32\n","\n","    down3 = Conv2D(256, (3, 3), padding='same')(down2_pool)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3 = Conv2D(256, (3, 3), padding='same')(down3)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3_pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n","    # 16\n","\n","    down4 = Conv2D(512, (3, 3), padding='same')(down3_pool)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4 = Conv2D(512, (3, 3), padding='same')(down4)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4_pool = MaxPooling2D((2, 2), strides=(2, 2))(down4)\n","    # 8\n","\n","    center = Conv2D(1024, (3, 3), padding='same')(down4_pool)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    center = Conv2D(1024, (3, 3), padding='same')(center)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    # center\n","\n","    up4 = UpSampling2D((2, 2))(center)\n","    up4 = concatenate([down4, up4], axis=3)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    # 16\n","\n","    up3 = UpSampling2D((2, 2))(up4)\n","    up3 = concatenate([down3, up3], axis=3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    # 32\n","\n","    up2 = UpSampling2D((2, 2))(up3)\n","    up2 = concatenate([down2, up2], axis=3)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    # 64\n","\n","    up1 = UpSampling2D((2, 2))(up2)\n","    up1 = concatenate([down1, up1], axis=3)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    # 128\n","\n","    up0 = UpSampling2D((2, 2))(up1)\n","    up0 = concatenate([down0, up0], axis=3)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    # 256\n","\n","    up0a = UpSampling2D((2, 2))(up0)\n","    up0a = concatenate([down0a, up0a], axis=3)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    # 512\n","\n","    up0b = UpSampling2D((2, 2))(up0a)\n","    up0b = concatenate([down0b, up0b], axis=3)\n","    up0b = Conv2D(8, (3, 3), padding='same')(up0b)\n","    up0b = BatchNormalization()(up0b)\n","    up0b = Activation('relu')(up0b)\n","    up0b = Conv2D(8, (3, 3), padding='same')(up0b)\n","    up0b = BatchNormalization()(up0b)\n","    up0b = Activation('relu')(up0b)\n","    up0b = Conv2D(8, (3, 3), padding='same')(up0b)\n","    up0b = BatchNormalization()(up0b)\n","    up0b = Activation('relu')(up0b)\n","    # 1024\n","\n","    classify = Conv2D(num_classes, (1, 1), activation='sigmoid')(up0b)\n","\n","    model = Model(inputs=inputs, outputs=classify)\n","\n","    model.compile(optimizer=RMSprop(lr=0.0001), loss=bce_dice_loss, metrics=[dice_coeff])\n","\n","    return model\n","####################### petrosgk #################"],"execution_count":43,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"cR77ALQleLOi","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from keras.models import load_model\n","# model = load_model('petrosgk_unet2.h5')\n","model = load_model('model.h5', custom_objects={ 'bce_dice_loss': bce_dice_loss,'dice_coeff':dice_coeff })"],"execution_count":0,"outputs":[]},{"metadata":{"id":"XSoUwfibeOf9","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from skimage.transform import resize"],"execution_count":0,"outputs":[]},{"metadata":{"id":"3nPNty0mQYm8","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from skimage.color import rgba2rgb"],"execution_count":0,"outputs":[]},{"metadata":{"id":"myiFtfAYaN0Q","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!apt-get install imagemagick"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ieT_YsOka2jg","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!mogrify -resize 512x512! Vein_Sus_Hepatic_Liver/*.png"],"execution_count":0,"outputs":[]},{"metadata":{"id":"bJkxpwk1a_3N","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!mogrify -resize 512x512! Vein_Sus_Hepatic_Truth/*.png"],"execution_count":0,"outputs":[]},{"metadata":{"id":"TFDlRLB4QhhL","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":2057},"outputId":"de6bd4ab-6e48-462d-d3f3-a89d5fa340f5","executionInfo":{"status":"ok","timestamp":1529940096182,"user_tz":-330,"elapsed":3080,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["from skimage import img_as_ubyte\n","\n","images = np.ndarray((58, 512, 512, 3), dtype=np.uint8)\n","masks = np.ndarray((58, 512, 512, 1), dtype=np.uint8)\n","\n","i = 0\n","print('-'*30)\n","print('Creating images...')\n","print('-'*30)\n","for itr,image_name in enumerate(all_images[0:58]):\n","    image_mask_name = all_masks[itr]\n","    print(image_name)\n","    img = img_as_ubyte(rgba2rgb(imread(image_name)))\n","#     img = resize(img, (512,512,3))\n","#     img = cv2.fastNlMeansDenoisingColored(img)\n","    img_mask = np.expand_dims(imread(image_mask_name, as_grey=True),2)\n","#     img_mask = resize(img_mask, (512,512,1))\n","\n","    img = np.array([img])\n","    img_mask = np.array([img_mask])\n","\n","    images[i] = img\n","    masks[i] = img_mask\n","\n","    if i%1 == 0:\n","      print(i,\" (64) image done\")\n","    i += 1\n","print('Loading done.')"],"execution_count":121,"outputs":[{"output_type":"stream","text":["------------------------------\n","Creating images...\n","------------------------------\n","Vein_Sus_Hepatic_Liver/0.png\n","(0, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/1.png\n","(1, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/10.png\n","(2, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/11.png\n","(3, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/12.png\n","(4, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/13.png\n","(5, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/14.png\n","(6, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/15.png\n","(7, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/16.png\n","(8, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/17.png\n","(9, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/18.png\n","(10, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/19.png\n","(11, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/2.png\n","(12, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/20.png\n","(13, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/21.png\n","(14, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/22.png\n","(15, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/23.png\n","(16, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/24.png\n","(17, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/25.png\n","(18, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/26.png\n","(19, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/27.png\n","(20, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/28.png\n","(21, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/29.png\n","(22, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/3.png\n","(23, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/30.png\n","(24, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/31.png\n","(25, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/32.png\n","(26, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/33.png\n","(27, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/34.png\n","(28, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/35.png\n","(29, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/36.png\n","(30, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/37.png\n","(31, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/38.png\n","(32, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/39.png\n","(33, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/4.png\n","(34, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/40.png\n","(35, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/41.png\n","(36, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/42.png\n","(37, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/43.png\n","(38, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/44.png\n","(39, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/45.png\n","(40, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/46.png\n","(41, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/47.png\n","(42, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/48.png\n","(43, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/49.png\n","(44, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/5.png\n","(45, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/50.png\n","(46, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/51.png\n","(47, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/52.png\n","(48, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/53.png\n","(49, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/54.png\n","(50, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/55.png\n","(51, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/56.png\n","(52, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/57.png\n","(53, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/58.png\n","(54, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/59.png\n","(55, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/6.png\n","(56, ' (64) image done')\n","Vein_Sus_Hepatic_Liver/60.png\n","(57, ' (64) image done')\n","Loading done.\n"],"name":"stdout"}]},{"metadata":{"id":"GdcRhsG8RXm7","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"ce3f38bf-4cbf-4243-c357-893dab9bbe5a","executionInfo":{"status":"ok","timestamp":1529940113868,"user_tz":-330,"elapsed":7334,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["score = model.evaluate(images, masks, batch_size=1)"],"execution_count":122,"outputs":[{"output_type":"stream","text":["58/58 [==============================] - 7s 113ms/step\n"],"name":"stdout"}]},{"metadata":{"id":"ZOJixK25RkW2","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"c7a3aed3-576a-4554-cf34-ac3d03909b55","executionInfo":{"status":"ok","timestamp":1529940114711,"user_tz":-330,"elapsed":717,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["score"],"execution_count":123,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2.1465733630887778, 0.06953918179941207]"]},"metadata":{"tags":[]},"execution_count":123}]},{"metadata":{"id":"7u50zRrORl9_","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":372},"outputId":"cd467b01-9ce8-47d8-8dd5-36a55c93fd2e","executionInfo":{"status":"ok","timestamp":1529940351648,"user_tz":-330,"elapsed":1283,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["idx = 47\n","fig, (ax1, ax2, ax3) = plt.subplots(1,3)\n","fig.set_size_inches(18.5, 10.5)\n","ax1.imshow(model.predict(np.expand_dims(images[idx],0))[0].squeeze())\n","ax2.imshow(masks[idx].squeeze())\n","ax3.imshow(images[idx])"],"execution_count":137,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fda07bd1e50>"]},"metadata":{"tags":[]},"execution_count":137},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABDAAAAFSCAYAAAAEkC/gAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3XmYZNlZ3/nvOefeGxGZWUt3dbeq\nN6lBSyIkSwIkJCQktCJjbDwGmUVsxsLYMjYW2MZCDMYPZpFlY2MkPAbbMzwDCGYGjxF4wBZiMQIk\noc0gRCtbLbpb6rX2ysrMiLj3nnPmj3PuzahSdW2dWbnE7/N0PZ2VGRF3iaibcd54FxNjRERERERE\nRERkN7M7vQMiIiIiIiIiIpejAIaIiIiIiIiI7HoKYIiIiIiIiIjIrqcAhoiIiIiIiIjsegpgiIiI\niIiIiMiupwCGiIiIiIiIiOx6xVY/4PLy8r8BXgRE4B+srKx8cKu3ISIiT5yu1yIie4eu2SIiW5yB\nsby8/GXA01dWVr4EeAPwk1v5+CIisjV0vRYR2Tt0zRYRSba6hORVwK8ArKys3A3csLy8fHCLtyEi\nIk+crtciInuHrtkiImx9CclR4MMzfz+ev7f6OLePW7x9EZHrxez0DjxBul6LyLzY69druMpr9mQy\nicPh8Hrsl4jIljHGEGO85DV7y3tgXLgP2/z4IiLXnfce59xO78ZW0/VaRGTvuOQ1ezgcYsx8XNZj\njHNzrDBfx6tj3b+eyPFudQnJw6RocOc24JEt3oaIyI4KIez0LmwFXa9FRPYOXbNFRNj6AMa7gdcB\nLC8vfyHw8MrKyrkt3oaIiDxxul6LiOwdumaLiAAmxq0ta15eXn4r8DIgAN+5srLyx5e4uWqqRWTP\nyWlvez7PT9drEZkTe/56DVd/zd4Hv6auiFLv9y8d6/51qeO9XA+MLQ9gXCW9IRaRPWe/BDCukq7X\nIrJXzdv1GhTA2Lfm6Xh1rPvXEwlgbHUJiYiIiIiIiIjIllMAQ0RERERERER2PQUwRERERERERGTX\nUwBDRERERERERHa9HQ9ghBB2ZLsxxv6PiOxO+vcpIiIiIiKdYqd34Fq6rXaLGmPMeV9fzf1n77uT\nLtyHyx3H7O0vdttrOaaLnYtL7cfV7rNIZzZwaG2Kn16iA/FF/97d/lr+7YuIiIiIyN61JwMY3YL7\nasfNdAueCzMvtnsBNLvQms04CSFcNBhwsf2b3cfu7xfev1sQXmzh193/SoIes+fpYtu/2ELywv2T\nS5s9xxeerwuzkrz3wPmvDe89xhistVhrcc71t5l1vZ6LiwXOLrbti30vhPC4r8vuNd3dd/bfxpUE\n+/RaFBERERHZP3Y8gHGtrjaD4lJZF1ux0LlYEODCMpWyLPuF5+x9LhaMuVjAoPv+pYIRsy683eMt\nErvzciVZF932r+R87fQC8nKvj+36JP9qs2Bmz1OMkaZp+v2JMXLu3Ll+ke+cw1rLdDplYWEB5xxF\nUfT37wIZj7cfW/l8zD7+5f5dXey1/Xivuy5AM3ssF973avZRQQwRERERkf3B7HAZxZZufLsXK1e6\nyH88VxN0ufB2s59EP97tLnx8Ldy2xnYHAq50+7P/77I0ugyMvfRcXyzYd7nX97Ue35UG6K7R3jnp\nW2Pna+5ERK7NvF2vAeJeem/wRMzbhxXzdLw61v3rUscbY7zkidhXAQyR7aa+CzJj3l4Eul6LyF41\nb9drUABj35qn49Wx7l9PJICx41NIREREREREREQuZ8/2wBDZCfMUGZ1nsyU6IiIiIiKyO+z6d+e7\nYdSpiMyXrrcI6BokIiIiIrJb7PoAhj7xFhEREREREZFdH8AQEREREREREVEAQ0RERERERER2PQUw\nRERERERERGTXUwBDROQS1IdHRERERGR3UABDRERERERERHY9BTBEREREREREZNdTAENERERERERE\ndj0FMORxxRiJMe70boiIiIiIiIgogCGPzxijBoYydxS0ExERERHZnRTAEJF9YyuCDwraiYiIiIjs\nTsVO78CFYoxaQIhsg9nFfYyREEJfJtRl21hrP+vf317697iX9lVERERERK7OrgtgaAEisj2MMecF\nMbqgRfe92X97s4HEi/1cRERERETkett1AQwR2T5dEOJSwYiLZUEpeCEiIiIiIjtNAQwROc9eDlZc\nrxI0lbqJiIiIiFx/auIpIvvG9QoqKHghIiIiInL9KYAhIiIiIiIiIrueAhgiIiIiIiIisuspgCEi\nIiIiIiIiu54CGCIiIiIiIiKy6ymAISJylWKMO70LIiIiIiJzRwEMEREREREREdn1FMAQERERERER\nkV1PAQwR2VVUniEiIiIiIhejAIaI7CrGmJ3eBRERERER2YUUwBARERERERGRXU8BDBERERERERHZ\n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\nAElFTkSuQmCC\n","text/plain":["<matplotlib.figure.Figure at 0x7fda07c60e90>"]},"metadata":{"tags":[]}}]}]}