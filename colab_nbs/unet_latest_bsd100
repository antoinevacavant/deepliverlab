{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"unet_latest_bsd100","version":"0.3.2","views":{},"default_view":{},"provenance":[{"file_id":"1XcBlLVxyBA2hli2urTT4rC6reDV5uYsM","timestamp":1527172853321}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"Hg3Nf51cqTxb","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!pip install -U -q PyDrive ## you will have install for every colab session\n","\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","\n","# 1. Authenticate and create the PyDrive client.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","\n","#https://drive.google.com/open?id=1zmSkoGVg3S2PUIT657qhuJBZUsmxBO1K\n","\n","opp_import = drive.CreateFile({'id':'1DNJPJcH19HQjMAfX1-pnUVZXxGyMmvvb'})\n","opp_import.GetContentFile('data_bsd100.zip')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-LCTH3-vrjZQ","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":3502},"outputId":"b57403e0-ebe3-4d05-bfc1-3c7fa79e8b35","executionInfo":{"status":"ok","timestamp":1527233043170,"user_tz":-330,"elapsed":1769,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!unzip data_bsd100.zip"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Archive:  data_bsd100.zip\r\n","   creating: ground_truth/\r\n","  inflating: ground_truth/87046.png  \r\n","  inflating: ground_truth/87015.png  \r\n","  inflating: ground_truth/81095.png  \r\n","  inflating: ground_truth/8068.png   \r\n","  inflating: ground_truth/80099.png  \r\n","  inflating: ground_truth/80090.png  \r\n","  inflating: ground_truth/70011.png  \r\n","  inflating: ground_truth/69040.png  \r\n","  inflating: ground_truth/69022.png  \r\n"," extracting: ground_truth/69020.png  \r\n","  inflating: ground_truth/64061.png  \r\n","  inflating: ground_truth/61060.png  \r\n","  inflating: ground_truth/6046.png   \r\n"," extracting: ground_truth/51084.png  \r\n","  inflating: ground_truth/48017.png  \r\n","  inflating: ground_truth/46076.png  \r\n","  inflating: ground_truth/43074.png  \r\n","  inflating: ground_truth/43051.png  \r\n","  inflating: ground_truth/43033.png  \r\n","  inflating: ground_truth/42078.png  \r\n","  inflating: ground_truth/42049.png  \r\n","  inflating: ground_truth/42044.png  \r\n","  inflating: ground_truth/41096.png  \r\n"," extracting: ground_truth/41085.png  \r\n","  inflating: ground_truth/41069.png  \r\n","  inflating: ground_truth/41033.png  \r\n","  inflating: ground_truth/41029.png  \r\n","  inflating: ground_truth/41025.png  \r\n","  inflating: ground_truth/41006.png  \r\n","  inflating: ground_truth/35070.png  \r\n"," extracting: ground_truth/35058.png  \r\n"," extracting: ground_truth/35010.png  \r\n","  inflating: ground_truth/3096.png   \r\n","  inflating: ground_truth/3063.png   \r\n","  inflating: ground_truth/291000.png  \r\n","  inflating: ground_truth/29030.png  \r\n","  inflating: ground_truth/285022.png  \r\n","  inflating: ground_truth/26031.png  \r\n","  inflating: ground_truth/253092.png  \r\n"," extracting: ground_truth/247085.png  \r\n","  inflating: ground_truth/247003.png  \r\n","  inflating: ground_truth/246009.png  \r\n","  inflating: ground_truth/238011.png  \r\n","  inflating: ground_truth/232076.png  \r\n","  inflating: ground_truth/23084.png  \r\n","  inflating: ground_truth/228076.png  \r\n","  inflating: ground_truth/227092.png  \r\n","  inflating: ground_truth/208078.png  \r\n","  inflating: ground_truth/207056.png  \r\n","  inflating: ground_truth/189080.png  \r\n","  inflating: ground_truth/189011.png  \r\n","  inflating: ground_truth/187083.png  \r\n","  inflating: ground_truth/187029.png  \r\n","  inflating: ground_truth/183087.png  \r\n","  inflating: ground_truth/181021.png  \r\n","  inflating: ground_truth/173036.png  \r\n","  inflating: ground_truth/168084.png  \r\n","  inflating: ground_truth/164046.png  \r\n","  inflating: ground_truth/160068.png  \r\n","  inflating: ground_truth/159091.png  \r\n","  inflating: ground_truth/157032.png  \r\n","  inflating: ground_truth/15062.png  \r\n","  inflating: ground_truth/143090.png  \r\n","  inflating: ground_truth/135069.png  \r\n","  inflating: ground_truth/135037.png  \r\n","  inflating: ground_truth/134008.png  \r\n","  inflating: ground_truth/130026.png  \r\n","  inflating: ground_truth/130014.png  \r\n","  inflating: ground_truth/126007.png  \r\n","  inflating: ground_truth/124084.png  \r\n"," extracting: ground_truth/12003.png  \r\n","  inflating: ground_truth/113044.png  \r\n","  inflating: ground_truth/113016.png  \r\n","  inflating: ground_truth/112082.png  \r\n","  inflating: ground_truth/112056.png  \r\n","  inflating: ground_truth/108070.png  \r\n","  inflating: ground_truth/108069.png  \r\n","  inflating: ground_truth/108041.png  \r\n","  inflating: ground_truth/108004.png  \r\n","  inflating: ground_truth/107072.png  \r\n","  inflating: ground_truth/106047.png  \r\n","  inflating: ground_truth/106025.png  \r\n","  inflating: ground_truth/106024.png  \r\n","  inflating: ground_truth/106005.png  \r\n","  inflating: ground_truth/105027.png  \r\n","  inflating: ground_truth/104010.png  \r\n","  inflating: ground_truth/103029.png  \r\n","  inflating: ground_truth/103006.png  \r\n","  inflating: ground_truth/101027.png  \r\n","  inflating: ground_truth/100098.png  \r\n","   creating: image/\r\n","  inflating: image/87046.jpg         \r\n","  inflating: image/87015.jpg         \r\n","  inflating: image/81095.jpg         \r\n","  inflating: image/8068.jpg          \r\n","  inflating: image/80099.jpg         \r\n","  inflating: image/80090.jpg         \r\n","  inflating: image/70011.jpg         \r\n","  inflating: image/69040.jpg         \r\n","  inflating: image/69022.jpg         \r\n","  inflating: image/69020.jpg         \r\n","  inflating: image/64061.jpg         \r\n","  inflating: image/61060.jpg         \r\n","  inflating: image/6046.jpg          \r\n","  inflating: image/51084.jpg         \r\n","  inflating: image/48017.jpg         \r\n","  inflating: image/46076.jpg         \r\n","  inflating: image/43074.jpg         \r\n","  inflating: image/43051.jpg         \r\n","  inflating: image/43033.jpg         \r\n","  inflating: image/42078.jpg         \r\n","  inflating: image/42049.jpg         \r\n","  inflating: image/42044.jpg         \r\n","  inflating: image/41096.jpg         \r\n","  inflating: image/41085.jpg         \r\n","  inflating: image/41069.jpg         \r\n","  inflating: image/41033.jpg         \r\n","  inflating: image/41029.jpg         \r\n","  inflating: image/41025.jpg         \r\n","  inflating: image/41006.jpg         \r\n","  inflating: image/35070.jpg         \r\n","  inflating: image/35058.jpg         \r\n","  inflating: image/35010.jpg         \r\n","  inflating: image/3096.jpg          \r\n","  inflating: image/3063.jpg          \r\n","  inflating: image/291000.jpg        \r\n","  inflating: image/29030.jpg         \r\n","  inflating: image/285022.jpg        \r\n","  inflating: image/26031.jpg         \r\n","  inflating: image/253092.jpg        \n","  inflating: image/247085.jpg        \n","  inflating: image/247003.jpg        \n","  inflating: image/246009.jpg        \n","  inflating: image/238011.jpg        \n","  inflating: image/232076.jpg        \n","  inflating: image/23084.jpg         \n","  inflating: image/228076.jpg        \n","  inflating: image/227092.jpg        \n","  inflating: image/208078.jpg        \n","  inflating: image/207056.jpg        \n","  inflating: image/189080.jpg        \n","  inflating: image/189011.jpg        \n","  inflating: image/187083.jpg        \n","  inflating: image/187029.jpg        \n","  inflating: image/183087.jpg        \n","  inflating: image/181021.jpg        \n","  inflating: image/173036.jpg        \n","  inflating: image/168084.jpg        \n","  inflating: image/164046.jpg        \n","  inflating: image/160068.jpg        \n","  inflating: image/159091.jpg        \n","  inflating: image/157032.jpg        \n","  inflating: image/15062.jpg         \n","  inflating: image/143090.jpg        \n","  inflating: image/135069.jpg        \n","  inflating: image/135037.jpg        \n","  inflating: image/134008.jpg        \n","  inflating: image/130026.jpg        \n","  inflating: image/130014.jpg        \n","  inflating: image/126007.jpg        \n","  inflating: image/124084.jpg        \n","  inflating: image/12003.jpg         \n","  inflating: image/113044.jpg        \n","  inflating: image/113016.jpg        \n","  inflating: image/112082.jpg        \n","  inflating: image/112056.jpg        \n","  inflating: image/108070.jpg        \n","  inflating: image/108069.jpg        \n","  inflating: image/108041.jpg        \n","  inflating: image/108004.jpg        \n","  inflating: image/107072.jpg        \n","  inflating: image/106047.jpg        \n","  inflating: image/106025.jpg        \n","  inflating: image/106024.jpg        \n","  inflating: image/106005.jpg        \n","  inflating: image/105027.jpg        \n","  inflating: image/104010.jpg        \n","  inflating: image/103029.jpg        \n","  inflating: image/103006.jpg        \n","  inflating: image/101027.jpg        \n","  inflating: image/100098.jpg        \n","   creating: test/\n","  inflating: test/368037.jpg         \n","  inflating: test/353013.jpg         \n","  inflating: test/323016.jpg         \n","  inflating: test/310007.jpg         \n","  inflating: test/309004.jpg         \n","  inflating: test/304074.jpg         \n","  inflating: test/304034.jpg         \n","  inflating: test/299091.jpg         \n","  inflating: test/299086.jpg         \n","  inflating: test/296059.jpg         \n","   creating: test_label/\n"," extracting: test_label/368037.png   \n","  inflating: test_label/353013.png   \n","  inflating: test_label/323016.png   \n","  inflating: test_label/310007.png   \n","  inflating: test_label/309004.png   \n","  inflating: test_label/304074.png   \n","  inflating: test_label/304034.png   \n","  inflating: test_label/299091.png   \n","  inflating: test_label/299086.png   \n","  inflating: test_label/296059.png   \n"],"name":"stdout"}]},{"metadata":{"id":"ho_dEVmsrpfN","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"9f1e2fc2-43e2-46c2-e018-9a76daabd8e1","executionInfo":{"status":"ok","timestamp":1527233049537,"user_tz":-330,"elapsed":1555,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!ls"],"execution_count":4,"outputs":[{"output_type":"stream","text":["data_bsd100.zip  datalab  ground_truth\timage  test  test_label\r\n"],"name":"stdout"}]},{"metadata":{"id":"MgmmweNZLK_T","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from __future__ import print_function\n","\n","import os\n","import numpy as np\n","\n","from skimage.io import imsave, imread\n","\n","data_path = './'\n","\n","image_rows = 321\n","image_cols = 481\n","\n","\n","def create_train_data():\n","    train_data_path = os.path.join(data_path, 'image')\n","    train_label_data_path = os.path.join(data_path, 'ground_truth')\n","    images = os.listdir(train_data_path)\n","    total = len(images)\n","\n","    imgs = np.ndarray((total, image_rows, image_cols), dtype=np.uint8)\n","    imgs_mask = np.ndarray((total, image_rows, image_cols), dtype=np.uint8)\n","    print(imgs.shape,\"imgs shape\")\n","    print(imgs_mask.shape,\"imgs_mask shape\")\n","\n","    i = 0\n","    print('-'*30)\n","    print('Creating training images...')\n","    print('-'*30)\n","    for image_name in images:\n","        image_mask_name = image_name.split('.')[0] + '.png'\n","        print(image_name,\"image name\")\n","        print(image_mask_name,\"image mask name\")\n","#         image_mask_name = image_name\n","        img = imread(os.path.join(train_data_path, image_name), as_grey=True)\n","        \n","        img_mask = imread(os.path.join(train_label_data_path, image_mask_name), as_grey=True)\n","      \n","        if img.shape[0]==481:\n","          img = np.rot90(img)\n","          img_mask = np.rot90(img_mask)\n","\n","        img = np.array([img])\n","        img_mask = np.array([img_mask])\n","        print(img.shape,\"img shape\")\n","        print(img_mask.shape,\"img_mask shape\")\n","        \n","        print(imgs[i].shape,\"imgs[i] shape\")\n","        print(imgs_mask[i].shape,\"imgs_mask[i] shape\")\n","\n","        imgs[i] = img\n","        imgs_mask[i] = img_mask\n","        \n","\n","        if i % 100 == 0:\n","            print('Done: {0}/{1} images'.format(i, total))\n","        i += 1\n","    print('Loading done.')\n","\n","    np.save('imgs_train.npy', imgs)\n","    np.save('imgs_mask_train.npy', imgs_mask)\n","    print('Saving to .npy files done.')\n","\n","\n","def load_train_data():\n","    imgs_train = np.load('imgs_train.npy')\n","    imgs_mask_train = np.load('imgs_mask_train.npy')\n","    return imgs_train, imgs_mask_train\n","\n","\n","def create_test_data():\n","    train_data_path = os.path.join(data_path, 'test')\n","    images = os.listdir(train_data_path)\n","    total = len(images)\n","\n","    imgs = np.ndarray((total, image_rows, image_cols), dtype=np.uint8)\n","    imgs_id = np.ndarray((total, ), dtype=np.int32)\n","\n","    i = 0\n","    print('-'*30)\n","    print('Creating test images...')\n","    print('-'*30)\n","    for image_name in images:\n","        img_id = int(image_name.split('.')[0])\n","        img = imread(os.path.join(train_data_path, image_name), as_grey=True)\n","        if img.shape[0]==481:\n","          img = np.rot90(img)\n","\n","        img = np.array([img])\n","\n","        imgs[i] = img\n","        imgs_id[i] = img_id\n","\n","        if i % 100 == 0:\n","            print('Done: {0}/{1} images'.format(i, total))\n","        i += 1\n","    print('Loading done.')\n","\n","    np.save('imgs_test.npy', imgs)\n","    np.save('imgs_id_test.npy', imgs_id)\n","    print('Saving to .npy files done.')\n","\n","\n","def load_test_data():\n","    imgs_test = np.load('imgs_test.npy')\n","    imgs_id = np.load('imgs_id_test.npy')\n","    return imgs_test, imgs_id"],"execution_count":0,"outputs":[]},{"metadata":{"id":"giWlfobUMgk_","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":9435},"outputId":"3208c8b1-fb94-4eab-d266-765481fb6306","executionInfo":{"status":"ok","timestamp":1527233851356,"user_tz":-330,"elapsed":1547,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["create_train_data()\n","create_test_data()"],"execution_count":8,"outputs":[{"output_type":"stream","text":["(90, 321, 481) imgs shape\n","(90, 321, 481) imgs_mask shape\n","------------------------------\n","Creating training images...\n","------------------------------\n","87015.jpg image name\n","87015.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","Done: 0/90 images\n","42044.jpg image name\n","42044.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","189011.jpg image name\n","189011.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","130026.jpg image name\n","130026.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","41096.jpg image name\n","41096.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","187029.jpg image name\n","187029.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","157032.jpg image name\n","157032.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","41069.jpg image name\n","41069.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","106005.jpg image name\n","106005.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","181021.jpg image name\n","181021.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","232076.jpg image name\n","232076.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","35058.jpg image name\n","35058.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","104010.jpg image name\n","104010.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","46076.jpg image name\n","46076.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","48017.jpg image name\n","48017.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","43033.jpg image name\n","43033.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","247003.jpg image name\n","247003.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","159091.jpg image name\n","159091.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","41033.jpg image name\n","41033.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","253092.jpg image name\n","253092.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","64061.jpg image name\n","64061.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","35070.jpg image name\n","35070.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","41006.jpg image name\n","41006.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","173036.jpg image name\n","173036.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","43074.jpg image name\n","43074.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","113016.jpg image name\n","113016.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","112082.jpg image name\n","112082.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","103006.jpg image name\n","103006.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","187083.jpg image name\n","187083.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","208078.jpg image name\n","208078.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","61060.jpg image name\n","61060.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","43051.jpg image name\n","43051.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","107072.jpg image name\n","107072.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","42078.jpg image name\n","42078.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","87046.jpg image name\n","87046.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","23084.jpg image name\n","23084.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","135037.jpg image name\n","135037.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","106047.jpg image name\n","106047.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","108069.jpg image name\n","108069.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","41025.jpg image name\n","41025.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","15062.jpg image name\n","15062.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","3063.jpg image name\n","3063.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","126007.jpg image name\n","126007.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","285022.jpg image name\n","285022.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","247085.jpg image name\n","247085.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","189080.jpg image name\n","189080.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","3096.jpg image name\n","3096.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","228076.jpg image name\n","228076.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","6046.jpg image name\n","6046.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","134008.jpg image name\n","134008.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","69020.jpg image name\n","69020.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","113044.jpg image name\n","113044.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","130014.jpg image name\n","130014.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","42049.jpg image name\n","42049.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","108004.jpg image name\n","108004.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","105027.jpg image name\n","105027.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","12003.jpg image name\n","12003.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","108041.jpg image name\n","108041.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","168084.jpg image name\n","168084.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","143090.jpg image name\n","143090.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","41029.jpg image name\n","41029.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","35010.jpg image name\n","35010.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","108070.jpg image name\n","108070.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","135069.jpg image name\n","135069.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","29030.jpg image name\n","29030.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","227092.jpg image name\n","227092.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","69040.jpg image name\n","69040.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","164046.jpg image name\n","164046.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","80090.jpg image name\n","80090.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","81095.jpg image name\n","81095.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","100098.jpg image name\n","100098.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","291000.jpg image name\n","291000.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","246009.jpg image name\n","246009.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","69022.jpg image name\n","69022.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","70011.jpg image name\n","70011.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","112056.jpg image name\n","112056.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","41085.jpg image name\n","41085.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","207056.jpg image name\n","207056.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","80099.jpg image name\n","80099.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","51084.jpg image name\n","51084.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","101027.jpg image name\n","101027.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","26031.jpg image name\n","26031.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","106024.jpg image name\n","106024.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","238011.jpg image name\n","238011.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","8068.jpg image name\n","8068.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","103029.jpg image name\n","103029.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","160068.jpg image name\n","160068.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","183087.jpg image name\n","183087.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","106025.jpg image name\n","106025.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","124084.jpg image name\n","124084.png image mask name\n","(1, 321, 481) img shape\n","(1, 321, 481) img_mask shape\n","(321, 481) imgs[i] shape\n","(321, 481) imgs_mask[i] shape\n","Loading done.\n","Saving to .npy files done.\n","------------------------------\n","Creating test images...\n","------------------------------\n","Done: 0/10 images\n","Loading done.\n","Saving to .npy files done.\n"],"name":"stdout"}]},{"metadata":{"id":"aFqhXskBNfQO","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"92f4a2d9-434d-45fe-e727-d683f161a17d","executionInfo":{"status":"ok","timestamp":1527233904292,"user_tz":-330,"elapsed":8020,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["from __future__ import print_function\n","\n","import os\n","from skimage.transform import resize\n","from skimage.io import imsave\n","import numpy as np\n","from keras.models import Model\n","from keras.layers import Input, concatenate, Conv2D, MaxPooling2D, Conv2DTranspose\n","from keras.optimizers import Adam\n","from keras.callbacks import ModelCheckpoint\n","from keras import backend as K\n","\n","# from data import load_train_data, load_test_data\n","\n","K.set_image_data_format('channels_last')  # TF dimension ordering in this code\n","\n","img_rows = 256\n","img_cols = 256\n","\n","smooth = 1.\n","\n","\n","def dice_coef(y_true, y_pred):\n","    y_true_f = K.flatten(y_true)\n","    y_pred_f = K.flatten(y_pred)\n","    intersection = K.sum(y_true_f * y_pred_f)\n","    return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n","\n","\n","def dice_coef_loss(y_true, y_pred):\n","    return -dice_coef(y_true, y_pred)\n","\n","\n","def get_unet():\n","    inputs = Input((img_rows, img_cols, 1))\n","    conv1 = Conv2D(32, (3, 3), activation='relu', padding='same')(inputs)\n","    conv1 = Conv2D(32, (3, 3), activation='relu', padding='same')(conv1)\n","    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n","\n","    conv2 = Conv2D(64, (3, 3), activation='relu', padding='same')(pool1)\n","    conv2 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv2)\n","    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n","\n","    conv3 = Conv2D(128, (3, 3), activation='relu', padding='same')(pool2)\n","    conv3 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv3)\n","    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n","\n","    conv4 = Conv2D(256, (3, 3), activation='relu', padding='same')(pool3)\n","    conv4 = Conv2D(256, (3, 3), activation='relu', padding='same')(conv4)\n","    pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)\n","\n","    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same')(pool4)\n","    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same')(conv5)\n","\n","    up6 = concatenate([Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same')(conv5), conv4], axis=3)\n","    conv6 = Conv2D(256, (3, 3), activation='relu', padding='same')(up6)\n","    conv6 = Conv2D(256, (3, 3), activation='relu', padding='same')(conv6)\n","\n","    up7 = concatenate([Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(conv6), conv3], axis=3)\n","    conv7 = Conv2D(128, (3, 3), activation='relu', padding='same')(up7)\n","    conv7 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv7)\n","\n","    up8 = concatenate([Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(conv7), conv2], axis=3)\n","    conv8 = Conv2D(64, (3, 3), activation='relu', padding='same')(up8)\n","    conv8 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv8)\n","\n","    up9 = concatenate([Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(conv8), conv1], axis=3)\n","    conv9 = Conv2D(32, (3, 3), activation='relu', padding='same')(up9)\n","    conv9 = Conv2D(32, (3, 3), activation='relu', padding='same')(conv9)\n","\n","    conv10 = Conv2D(1, (1, 1), activation='sigmoid')(conv9)\n","\n","    model = Model(inputs=[inputs], outputs=[conv10])\n","\n","    model.compile(optimizer=Adam(lr=1e-5), loss=dice_coef_loss, metrics=[dice_coef])\n","\n","    return model\n","\n","\n","def preprocess(imgs):\n","    imgs_p = np.ndarray((imgs.shape[0], img_rows, img_cols), dtype=np.uint8)\n","    for i in range(imgs.shape[0]):\n","        imgs_p[i] = resize(imgs[i], (img_cols, img_rows), preserve_range=True)\n","\n","    imgs_p = imgs_p[..., np.newaxis]\n","    return imgs_p\n","\n","\n","def train_and_predict():\n","    print('-'*30)\n","    print('Loading and preprocessing train data...')\n","    print('-'*30)\n","    imgs_train, imgs_mask_train = load_train_data()\n","\n","    imgs_train = preprocess(imgs_train)\n","    imgs_mask_train = preprocess(imgs_mask_train)\n","\n","    imgs_train = imgs_train.astype('float32')\n","    mean = np.mean(imgs_train)  # mean for data centering\n","    std = np.std(imgs_train)  # std for data normalization\n","\n","    imgs_train -= mean\n","    imgs_train /= std\n","\n","    imgs_mask_train = imgs_mask_train.astype('float32')\n","    imgs_mask_train /= 255.  # scale masks to [0, 1]\n","\n","    print('-'*30)\n","    print('Creating and compiling model...')\n","    print('-'*30)\n","    model = get_unet()\n","    model_checkpoint = ModelCheckpoint('weights.h5', monitor='val_loss', save_best_only=True)\n","\n","    print('-'*30)\n","    print('Fitting model...')\n","    print('-'*30)\n","    model.fit(imgs_train, imgs_mask_train, batch_size=32, nb_epoch=20, verbose=1, shuffle=True,\n","              validation_split=0.2,\n","              callbacks=[model_checkpoint])\n","\n","    print('-'*30)\n","    print('Loading and preprocessing test data...')\n","    print('-'*30)\n","    imgs_test, imgs_id_test = load_test_data()\n","    imgs_test = preprocess(imgs_test)\n","\n","    imgs_test = imgs_test.astype('float32')\n","    imgs_test -= mean\n","    imgs_test /= std\n","\n","    print('-'*30)\n","    print('Loading saved weights...')\n","    print('-'*30)\n","    model.load_weights('weights.h5')\n","\n","    print('-'*30)\n","    print('Predicting masks on test data...')\n","    print('-'*30)\n","    imgs_mask_test = model.predict(imgs_test, verbose=1)\n","    np.save('imgs_mask_test.npy', imgs_mask_test)\n","\n","    print('-' * 30)\n","    print('Saving predicted masks to files...')\n","    print('-' * 30)\n","    pred_dir = 'preds'\n","    if not os.path.exists(pred_dir):\n","        os.mkdir(pred_dir)\n","    for image, image_id in zip(imgs_mask_test, imgs_id_test):\n","        image = (image[:, :, 0] * 255.).astype(np.uint8)\n","        imsave(os.path.join(pred_dir, str(image_id) + '_pred.png'), image)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"owazB4uiOUB3","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":1445},"outputId":"b7397c8e-dc07-467e-affe-b672a696044c","executionInfo":{"status":"ok","timestamp":1527233987209,"user_tz":-330,"elapsed":79402,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["train_and_predict()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["------------------------------\n","Loading and preprocessing train data...\n","------------------------------\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/skimage/transform/_warps.py:84: UserWarning: The default mode, 'constant', will be changed to 'reflect' in skimage 0.15.\n","  warn(\"The default mode, 'constant', will be changed to 'reflect' in \"\n"],"name":"stderr"},{"output_type":"stream","text":["------------------------------\n","Creating and compiling model...\n","------------------------------\n","------------------------------\n","Fitting model...\n","------------------------------\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:119: UserWarning: The `nb_epoch` argument in `fit` has been renamed `epochs`.\n"],"name":"stderr"},{"output_type":"stream","text":["Train on 72 samples, validate on 18 samples\n","Epoch 1/20\n","72/72 [==============================] - 18s 244ms/step - loss: -0.3788 - dice_coef: 0.3788 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 2/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3787 - dice_coef: 0.3787 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 3/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3788 - dice_coef: 0.3788 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 4/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3774 - dice_coef: 0.3774 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 5/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3789 - dice_coef: 0.3789 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 6/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3784 - dice_coef: 0.3784 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 7/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3784 - dice_coef: 0.3784 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 8/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3790 - dice_coef: 0.3790 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 9/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3786 - dice_coef: 0.3786 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 10/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3790 - dice_coef: 0.3790 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 11/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3791 - dice_coef: 0.3791 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 12/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3789 - dice_coef: 0.3789 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 13/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3791 - dice_coef: 0.3791 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 14/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3789 - dice_coef: 0.3789 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 15/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3789 - dice_coef: 0.3789 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 16/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3790 - dice_coef: 0.3790 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 17/20\n","72/72 [==============================] - 3s 39ms/step - loss: -0.3786 - dice_coef: 0.3786 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 18/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3793 - dice_coef: 0.3793 - val_loss: -0.3198 - val_dice_coef: 0.3198\n"],"name":"stdout"},{"output_type":"stream","text":["Epoch 19/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3791 - dice_coef: 0.3791 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","Epoch 20/20\n","72/72 [==============================] - 3s 40ms/step - loss: -0.3785 - dice_coef: 0.3785 - val_loss: -0.3198 - val_dice_coef: 0.3198\n","------------------------------\n","Loading and preprocessing test data...\n","------------------------------\n","------------------------------\n","Loading saved weights...\n","------------------------------\n","------------------------------\n","Predicting masks on test data...\n","------------------------------\n","10/10 [==============================] - 1s 137ms/step\n","------------------------------\n","Saving predicted masks to files...\n","------------------------------\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/299091_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n","/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/304074_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n","/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/296059_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n","/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/309004_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n","/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/299086_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n","/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/304034_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n","/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/353013_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n","/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/310007_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n","/usr/local/lib/python3.6/dist-packages/skimage/io/_io.py:132: UserWarning: preds/323016_pred.png is a low contrast image\n","  warn('%s is a low contrast image' % fname)\n"],"name":"stderr"}]},{"metadata":{"id":"w4KytkeMPtrJ","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from google.colab import files"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NfdjEC0AQCTf","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["for file in os.listdir(\"preds\"):\n","  files.download(\"preds/\"+file)"],"execution_count":0,"outputs":[]}]}