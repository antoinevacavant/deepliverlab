{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"visualising 200 epochs (gcp) unet results","version":"0.3.2","views":{},"default_view":{},"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"KZAAQgm3K-sf","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":68},"outputId":"466c693c-4839-457f-db14-aeecf78f265f","executionInfo":{"status":"ok","timestamp":1528978397061,"user_tz":-330,"elapsed":15776,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!curl https://transfer.sh/14xNCX/unet_final.h5 -o model.h5"],"execution_count":2,"outputs":[{"output_type":"stream","text":["  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","100  396M  100  396M    0     0  28.3M      0  0:00:14  0:00:14 --:--:-- 31.5M\n"],"name":"stdout"}]},{"metadata":{"id":"ErJCW5ZFLNAw","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":68},"outputId":"d02fa6ae-946a-4fbc-e6d9-0416e66a0846","executionInfo":{"status":"ok","timestamp":1528978409536,"user_tz":-330,"elapsed":1894,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!ls -lh"],"execution_count":3,"outputs":[{"output_type":"stream","text":["total 397M\r\n","drwxr-xr-x 1 root root 4.0K May 21 17:02 datalab\r\n","-rw-r--r-- 1 root root 397M Jun 14 12:13 model.h5\r\n"],"name":"stdout"}]},{"metadata":{"id":"Gkn6OSu0LXag","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"3b6ff9f8-a13e-452a-8010-9cb86b1b743e","executionInfo":{"status":"ok","timestamp":1528978423144,"user_tz":-330,"elapsed":10040,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["####################### petrosgk #################\n","from keras.losses import binary_crossentropy\n","import keras.backend as K\n","\n","\n","def dice_coeff(y_true, y_pred):\n","    smooth = 1.\n","    y_true_f = K.flatten(y_true)\n","    y_pred_f = K.flatten(y_pred)\n","    intersection = K.sum(y_true_f * y_pred_f)\n","    score = (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n","    return score\n","\n","\n","def dice_loss(y_true, y_pred):\n","    loss = 1 - dice_coeff(y_true, y_pred)\n","    return loss\n","\n","\n","def bce_dice_loss(y_true, y_pred):\n","    loss = binary_crossentropy(y_true, y_pred) + dice_loss(y_true, y_pred)\n","    return loss\n","\n","\n","def weighted_dice_coeff(y_true, y_pred, weight):\n","    smooth = 1.\n","    w, m1, m2 = weight * weight, y_true, y_pred\n","    intersection = (m1 * m2)\n","    score = (2. * K.sum(w * intersection) + smooth) / (K.sum(w * m1) + K.sum(w * m2) + smooth)\n","    return score\n","\n","\n","def weighted_dice_loss(y_true, y_pred):\n","    y_true = K.cast(y_true, 'float32')\n","    y_pred = K.cast(y_pred, 'float32')\n","    # if we want to get same size of output, kernel size must be odd number\n","    if K.int_shape(y_pred)[1] == 128:\n","        kernel_size = 11\n","    elif K.int_shape(y_pred)[1] == 256:\n","        kernel_size = 21\n","    elif K.int_shape(y_pred)[1] == 512:\n","        kernel_size = 21\n","    elif K.int_shape(y_pred)[1] == 1024:\n","        kernel_size = 41\n","    else:\n","        raise ValueError('Unexpected image size')\n","    averaged_mask = K.pool2d(\n","        y_true, pool_size=(kernel_size, kernel_size), strides=(1, 1), padding='same', pool_mode='avg')\n","    border = K.cast(K.greater(averaged_mask, 0.005), 'float32') * K.cast(K.less(averaged_mask, 0.995), 'float32')\n","    weight = K.ones_like(averaged_mask)\n","    w0 = K.sum(weight)\n","    weight += border * 2\n","    w1 = K.sum(weight)\n","    weight *= (w0 / w1)\n","    loss = 1 - weighted_dice_coeff(y_true, y_pred, weight)\n","    return loss\n","\n","\n","def weighted_bce_loss(y_true, y_pred, weight):\n","    # avoiding overflow\n","    epsilon = 1e-7\n","    y_pred = K.clip(y_pred, epsilon, 1. - epsilon)\n","    logit_y_pred = K.log(y_pred / (1. - y_pred))\n","\n","    # https://www.tensorflow.org/api_docs/python/tf/nn/weighted_cross_entropy_with_logits\n","    loss = (1. - y_true) * logit_y_pred + (1. + (weight - 1.) * y_true) * \\\n","                                          (K.log(1. + K.exp(-K.abs(logit_y_pred))) + K.maximum(-logit_y_pred, 0.))\n","    return K.sum(loss) / K.sum(weight)\n","\n","\n","def weighted_bce_dice_loss(y_true, y_pred):\n","    y_true = K.cast(y_true, 'float32')\n","    y_pred = K.cast(y_pred, 'float32')\n","    # if we want to get same size of output, kernel size must be odd number\n","    if K.int_shape(y_pred)[1] == 128:\n","        kernel_size = 11\n","    elif K.int_shape(y_pred)[1] == 256:\n","        kernel_size = 21\n","    elif K.int_shape(y_pred)[1] == 512:\n","        kernel_size = 21\n","    elif K.int_shape(y_pred)[1] == 1024:\n","        kernel_size = 41\n","    else:\n","        raise ValueError('Unexpected image size')\n","    averaged_mask = K.pool2d(\n","        y_true, pool_size=(kernel_size, kernel_size), strides=(1, 1), padding='same', pool_mode='avg')\n","    border = K.cast(K.greater(averaged_mask, 0.005), 'float32') * K.cast(K.less(averaged_mask, 0.995), 'float32')\n","    weight = K.ones_like(averaged_mask)\n","    w0 = K.sum(weight)\n","    weight += border * 2\n","    w1 = K.sum(weight)\n","    weight *= (w0 / w1)\n","    loss = weighted_bce_loss(y_true, y_pred, weight) + (1 - weighted_dice_coeff(y_true, y_pred, weight))\n","    return loss\n","  \n","  \n","from keras.models import Model\n","from keras.layers import Input, concatenate, Conv2D, MaxPooling2D, Activation, UpSampling2D, BatchNormalization\n","from keras.optimizers import RMSprop,Adam\n","\n","\n","def get_unet_128(input_shape=(128, 128, 3),\n","                 num_classes=1):\n","    inputs = Input(shape=input_shape)\n","    # 128\n","\n","    down1 = Conv2D(64, (3, 3), padding='same')(inputs)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1 = Conv2D(64, (3, 3), padding='same')(down1)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1_pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n","    # 64\n","\n","    down2 = Conv2D(128, (3, 3), padding='same')(down1_pool)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2 = Conv2D(128, (3, 3), padding='same')(down2)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2_pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n","    # 32\n","\n","    down3 = Conv2D(256, (3, 3), padding='same')(down2_pool)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3 = Conv2D(256, (3, 3), padding='same')(down3)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3_pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n","    # 16\n","\n","    down4 = Conv2D(512, (3, 3), padding='same')(down3_pool)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4 = Conv2D(512, (3, 3), padding='same')(down4)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4_pool = MaxPooling2D((2, 2), strides=(2, 2))(down4)\n","    # 8\n","\n","    center = Conv2D(1024, (3, 3), padding='same')(down4_pool)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    center = Conv2D(1024, (3, 3), padding='same')(center)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    # center\n","\n","    up4 = UpSampling2D((2, 2))(center)\n","    up4 = concatenate([down4, up4], axis=3)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    # 16\n","\n","    up3 = UpSampling2D((2, 2))(up4)\n","    up3 = concatenate([down3, up3], axis=3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    # 32\n","\n","    up2 = UpSampling2D((2, 2))(up3)\n","    up2 = concatenate([down2, up2], axis=3)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    # 64\n","\n","    up1 = UpSampling2D((2, 2))(up2)\n","    up1 = concatenate([down1, up1], axis=3)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    # 128\n","\n","    classify = Conv2D(num_classes, (1, 1), activation='sigmoid')(up1)\n","\n","    model = Model(inputs=inputs, outputs=classify)\n","\n","    model.compile(optimizer=RMSprop(lr=0.0001), loss=bce_dice_loss, metrics=[dice_coeff])\n","\n","    return model\n","\n","\n","def get_unet_256(input_shape=(256, 256, 3),\n","                 num_classes=1):\n","    inputs = Input(shape=input_shape)\n","    # 256\n","\n","    down0 = Conv2D(32, (3, 3), padding='same')(inputs)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0)\n","    # 128\n","\n","    down1 = Conv2D(64, (3, 3), padding='same')(down0_pool)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1 = Conv2D(64, (3, 3), padding='same')(down1)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1_pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n","    # 64\n","\n","    down2 = Conv2D(128, (3, 3), padding='same')(down1_pool)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2 = Conv2D(128, (3, 3), padding='same')(down2)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2_pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n","    # 32\n","\n","    down3 = Conv2D(256, (3, 3), padding='same')(down2_pool)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3 = Conv2D(256, (3, 3), padding='same')(down3)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3_pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n","    # 16\n","\n","    down4 = Conv2D(512, (3, 3), padding='same')(down3_pool)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4 = Conv2D(512, (3, 3), padding='same')(down4)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4_pool = MaxPooling2D((2, 2), strides=(2, 2))(down4)\n","    # 8\n","\n","    center = Conv2D(1024, (3, 3), padding='same')(down4_pool)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    center = Conv2D(1024, (3, 3), padding='same')(center)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    # center\n","\n","    up4 = UpSampling2D((2, 2))(center)\n","    up4 = concatenate([down4, up4], axis=3)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    # 16\n","\n","    up3 = UpSampling2D((2, 2))(up4)\n","    up3 = concatenate([down3, up3], axis=3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    # 32\n","\n","    up2 = UpSampling2D((2, 2))(up3)\n","    up2 = concatenate([down2, up2], axis=3)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    # 64\n","\n","    up1 = UpSampling2D((2, 2))(up2)\n","    up1 = concatenate([down1, up1], axis=3)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    # 128\n","\n","    up0 = UpSampling2D((2, 2))(up1)\n","    up0 = concatenate([down0, up0], axis=3)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    # 256\n","\n","    classify = Conv2D(num_classes, (1, 1), activation='sigmoid')(up0)\n","\n","    model = Model(inputs=inputs, outputs=classify)\n","\n","    model.compile(optimizer=RMSprop(lr=0.0001), loss=bce_dice_loss, metrics=[dice_coeff])\n","\n","    return model\n","\n","\n","def get_unet_512(input_shape=(512, 512, 3),\n","                 num_classes=1):\n","    inputs = Input(shape=input_shape)\n","    # 512\n","\n","    down0a = Conv2D(16, (3, 3), padding='same')(inputs)\n","    down0a = BatchNormalization()(down0a)\n","    down0a = Activation('relu')(down0a)\n","    down0a = Conv2D(16, (3, 3), padding='same')(down0a)\n","    down0a = BatchNormalization()(down0a)\n","    down0a = Activation('relu')(down0a)\n","    down0a_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0a)\n","    # 256\n","\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0a_pool)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0)\n","    # 128\n","\n","    down1 = Conv2D(64, (3, 3), padding='same')(down0_pool)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1 = Conv2D(64, (3, 3), padding='same')(down1)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1_pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n","    # 64\n","\n","    down2 = Conv2D(128, (3, 3), padding='same')(down1_pool)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2 = Conv2D(128, (3, 3), padding='same')(down2)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2_pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n","    # 32\n","\n","    down3 = Conv2D(256, (3, 3), padding='same')(down2_pool)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3 = Conv2D(256, (3, 3), padding='same')(down3)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3_pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n","    # 16\n","\n","    down4 = Conv2D(512, (3, 3), padding='same')(down3_pool)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4 = Conv2D(512, (3, 3), padding='same')(down4)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4_pool = MaxPooling2D((2, 2), strides=(2, 2))(down4)\n","    # 8\n","\n","    center = Conv2D(1024, (3, 3), padding='same')(down4_pool)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    center = Conv2D(1024, (3, 3), padding='same')(center)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    # center\n","\n","    up4 = UpSampling2D((2, 2))(center)\n","    up4 = concatenate([down4, up4], axis=3)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    # 16\n","\n","    up3 = UpSampling2D((2, 2))(up4)\n","    up3 = concatenate([down3, up3], axis=3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    # 32\n","\n","    up2 = UpSampling2D((2, 2))(up3)\n","    up2 = concatenate([down2, up2], axis=3)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    # 64\n","\n","    up1 = UpSampling2D((2, 2))(up2)\n","    up1 = concatenate([down1, up1], axis=3)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    # 128\n","\n","    up0 = UpSampling2D((2, 2))(up1)\n","    up0 = concatenate([down0, up0], axis=3)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    # 256\n","\n","    up0a = UpSampling2D((2, 2))(up0)\n","    up0a = concatenate([down0a, up0a], axis=3)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    # 512\n","\n","    classify = Conv2D(num_classes, (1, 1), activation='sigmoid')(up0a)\n","\n","    model = Model(inputs=inputs, outputs=classify)\n","\n","    model.compile(optimizer=Adam(lr=0.001), loss=bce_dice_loss, metrics=[dice_coeff])\n","\n","    return model\n","\n","\n","def get_unet_1024(input_shape=(1024, 1024, 3),\n","                  num_classes=1):\n","    inputs = Input(shape=input_shape)\n","    # 1024\n","\n","    down0b = Conv2D(8, (3, 3), padding='same')(inputs)\n","    down0b = BatchNormalization()(down0b)\n","    down0b = Activation('relu')(down0b)\n","    down0b = Conv2D(8, (3, 3), padding='same')(down0b)\n","    down0b = BatchNormalization()(down0b)\n","    down0b = Activation('relu')(down0b)\n","    down0b_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0b)\n","    # 512\n","\n","    down0a = Conv2D(16, (3, 3), padding='same')(down0b_pool)\n","    down0a = BatchNormalization()(down0a)\n","    down0a = Activation('relu')(down0a)\n","    down0a = Conv2D(16, (3, 3), padding='same')(down0a)\n","    down0a = BatchNormalization()(down0a)\n","    down0a = Activation('relu')(down0a)\n","    down0a_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0a)\n","    # 256\n","\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0a_pool)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0 = Conv2D(32, (3, 3), padding='same')(down0)\n","    down0 = BatchNormalization()(down0)\n","    down0 = Activation('relu')(down0)\n","    down0_pool = MaxPooling2D((2, 2), strides=(2, 2))(down0)\n","    # 128\n","\n","    down1 = Conv2D(64, (3, 3), padding='same')(down0_pool)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1 = Conv2D(64, (3, 3), padding='same')(down1)\n","    down1 = BatchNormalization()(down1)\n","    down1 = Activation('relu')(down1)\n","    down1_pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n","    # 64\n","\n","    down2 = Conv2D(128, (3, 3), padding='same')(down1_pool)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2 = Conv2D(128, (3, 3), padding='same')(down2)\n","    down2 = BatchNormalization()(down2)\n","    down2 = Activation('relu')(down2)\n","    down2_pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n","    # 32\n","\n","    down3 = Conv2D(256, (3, 3), padding='same')(down2_pool)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3 = Conv2D(256, (3, 3), padding='same')(down3)\n","    down3 = BatchNormalization()(down3)\n","    down3 = Activation('relu')(down3)\n","    down3_pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n","    # 16\n","\n","    down4 = Conv2D(512, (3, 3), padding='same')(down3_pool)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4 = Conv2D(512, (3, 3), padding='same')(down4)\n","    down4 = BatchNormalization()(down4)\n","    down4 = Activation('relu')(down4)\n","    down4_pool = MaxPooling2D((2, 2), strides=(2, 2))(down4)\n","    # 8\n","\n","    center = Conv2D(1024, (3, 3), padding='same')(down4_pool)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    center = Conv2D(1024, (3, 3), padding='same')(center)\n","    center = BatchNormalization()(center)\n","    center = Activation('relu')(center)\n","    # center\n","\n","    up4 = UpSampling2D((2, 2))(center)\n","    up4 = concatenate([down4, up4], axis=3)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    up4 = Conv2D(512, (3, 3), padding='same')(up4)\n","    up4 = BatchNormalization()(up4)\n","    up4 = Activation('relu')(up4)\n","    # 16\n","\n","    up3 = UpSampling2D((2, 2))(up4)\n","    up3 = concatenate([down3, up3], axis=3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    up3 = Conv2D(256, (3, 3), padding='same')(up3)\n","    up3 = BatchNormalization()(up3)\n","    up3 = Activation('relu')(up3)\n","    # 32\n","\n","    up2 = UpSampling2D((2, 2))(up3)\n","    up2 = concatenate([down2, up2], axis=3)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    up2 = Conv2D(128, (3, 3), padding='same')(up2)\n","    up2 = BatchNormalization()(up2)\n","    up2 = Activation('relu')(up2)\n","    # 64\n","\n","    up1 = UpSampling2D((2, 2))(up2)\n","    up1 = concatenate([down1, up1], axis=3)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    up1 = Conv2D(64, (3, 3), padding='same')(up1)\n","    up1 = BatchNormalization()(up1)\n","    up1 = Activation('relu')(up1)\n","    # 128\n","\n","    up0 = UpSampling2D((2, 2))(up1)\n","    up0 = concatenate([down0, up0], axis=3)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    up0 = Conv2D(32, (3, 3), padding='same')(up0)\n","    up0 = BatchNormalization()(up0)\n","    up0 = Activation('relu')(up0)\n","    # 256\n","\n","    up0a = UpSampling2D((2, 2))(up0)\n","    up0a = concatenate([down0a, up0a], axis=3)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    up0a = Conv2D(16, (3, 3), padding='same')(up0a)\n","    up0a = BatchNormalization()(up0a)\n","    up0a = Activation('relu')(up0a)\n","    # 512\n","\n","    up0b = UpSampling2D((2, 2))(up0a)\n","    up0b = concatenate([down0b, up0b], axis=3)\n","    up0b = Conv2D(8, (3, 3), padding='same')(up0b)\n","    up0b = BatchNormalization()(up0b)\n","    up0b = Activation('relu')(up0b)\n","    up0b = Conv2D(8, (3, 3), padding='same')(up0b)\n","    up0b = BatchNormalization()(up0b)\n","    up0b = Activation('relu')(up0b)\n","    up0b = Conv2D(8, (3, 3), padding='same')(up0b)\n","    up0b = BatchNormalization()(up0b)\n","    up0b = Activation('relu')(up0b)\n","    # 1024\n","\n","    classify = Conv2D(num_classes, (1, 1), activation='sigmoid')(up0b)\n","\n","    model = Model(inputs=inputs, outputs=classify)\n","\n","    model.compile(optimizer=RMSprop(lr=0.0001), loss=bce_dice_loss, metrics=[dice_coeff])\n","\n","    return model\n","####################### petrosgk #################"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"p8jolp9lLYLB","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from keras.models import load_model\n","# model = load_model('petrosgk_unet2.h5')\n","model = load_model('model.h5', custom_objects={ 'bce_dice_loss': bce_dice_loss,'dice_coeff':dice_coeff })"],"execution_count":0,"outputs":[]},{"metadata":{"id":"_BBQPWjlLpLv","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!pip install -U -q PyDrive ## you will have to install for every colab session\n","\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","\n","# 1. Authenticate and create the PyDrive client.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","\n","\n","opp_import = drive.CreateFile({'id':'14CooPE9PiiL6jvfCeeakPvc_Oaib7-Ba'})\n","opp_import.GetContentFile('data_complete.zip')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NLPwHn5_Lzoy","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!unzip -qq data_complete.zip"],"execution_count":0,"outputs":[]},{"metadata":{"id":"a96kt9HJL3RJ","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"5a9b79f3-f8ea-46cc-a27f-077ea6c12832","executionInfo":{"status":"ok","timestamp":1528978938484,"user_tz":-330,"elapsed":1983,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["!ls"],"execution_count":9,"outputs":[{"output_type":"stream","text":["data_complete  data_complete.zip  datalab  model.h5\r\n"],"name":"stdout"}]},{"metadata":{"id":"1ag7-cAKxjYh","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import numpy as np \n","import pandas as pd\n","import os\n","from glob import glob\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","import keras.backend as K\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, \\\n","                         Flatten, Convolution2D, MaxPooling2D, \\\n","                         BatchNormalization, UpSampling2D\n","from keras.utils import np_utils\n","\n","from skimage.io import imread\n","from sklearn.model_selection import train_test_split"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Fn8V346lxs0d","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"b54b9787-27a9-4690-dfee-6c2e70a2ab32","executionInfo":{"status":"ok","timestamp":1528978945895,"user_tz":-330,"elapsed":502,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["K.image_data_format()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'channels_last'"]},"metadata":{"tags":[]},"execution_count":11}]},{"metadata":{"id":"gBNOMc-XyJMV","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["# BASE_IMAGE_PATH = os.path.join('.,','input')\n","BASE_IMAGE_PATH = 'data_complete'\n","all_images = sorted(glob(os.path.join(BASE_IMAGE_PATH, 'images', '*.png')))\n","# all_masks = ['_masks'.join(c_file.split('_images')) for c_file in all_images]\n","all_masks = sorted(glob(os.path.join(BASE_IMAGE_PATH, 'masks', '*.png')))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"_t_46sB3yvba","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":85},"outputId":"ea8c5c8f-236d-4e72-f9e5-51ec45f09611","executionInfo":{"status":"ok","timestamp":1528978950089,"user_tz":-330,"elapsed":675,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["print(all_images[100])\n","print(len(all_images))\n","print(all_masks[100])\n","print(len(all_masks))"],"execution_count":13,"outputs":[{"output_type":"stream","text":["data_complete/images/14_88.png\n","1516\n","data_complete/masks/14_88.png\n","1516\n"],"name":"stdout"}]},{"metadata":{"id":"JT2o7dNx24Yq","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":255},"outputId":"38f19e90-2b54-4281-e3f4-bc926296a5a1","executionInfo":{"status":"ok","timestamp":1528978973936,"user_tz":-330,"elapsed":856,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["test_image = imread(all_images[100])\n","test_mask = imread(all_masks[100])\n","print(test_mask.shape)\n","print(all_masks[100])\n","fig, (ax1, ax2) = plt.subplots(1,2)\n","# fig.set_size_inches(18.5, 10.5)\n","ax1.imshow(test_image)\n","ax2.imshow(test_mask)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["(512, 512, 4)\n","data_complete/masks/14_88.png\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fec67064550>"]},"metadata":{"tags":[]},"execution_count":15},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7fec6915f208>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"W1uTSG3_36zQ","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":51},"outputId":"67f781d9-7e64-4adf-ca6d-4b58210f2abf","executionInfo":{"status":"ok","timestamp":1528979043478,"user_tz":-330,"elapsed":674,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["print('Total samples are', len(all_images))\n","print('Image resolution is', test_image.shape)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Total samples are 1516\n","Image resolution is (512, 512, 4)\n"],"name":"stdout"}]},{"metadata":{"id":"03cQbk0BJ4Ny","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"d2be774b-d7b2-4135-d67f-f31dd17a8bd4","executionInfo":{"status":"ok","timestamp":1528979047586,"user_tz":-330,"elapsed":591,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["from skimage.color import rgba2rgb\n","rgba2rgb(imread(all_images[100])).shape"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(512, 512, 3)"]},"metadata":{"tags":[]},"execution_count":17}]},{"metadata":{"id":"bn9Ewx9_KdYb","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"97605012-6f2f-4419-b8f2-9f6e4a4e92ae","executionInfo":{"status":"ok","timestamp":1528979049143,"user_tz":-330,"elapsed":546,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["np.expand_dims(imread(all_masks[100], as_grey=True),2).shape"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(512, 512, 1)"]},"metadata":{"tags":[]},"execution_count":18}]},{"metadata":{"id":"Q1bV2U1BZXIy","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import cv2"],"execution_count":0,"outputs":[]},{"metadata":{"id":"P0bD_saK3-Eo","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":442},"outputId":"a9c5f5a5-e273-4e19-d1a5-c5cda85e3054","executionInfo":{"status":"ok","timestamp":1528979343964,"user_tz":-330,"elapsed":70751,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["# images = np.stack([jimread(image) for image in all_images], 0)\n","# # masks normalization - already 0 and 1\n","# masks = np.stack([jimread(image) for image in all_masks], 0)\n","from skimage import img_as_ubyte\n","\n","images = np.ndarray((1516, 512, 512, 3), dtype=np.uint8)\n","masks = np.ndarray((1516, 512, 512, 1), dtype=np.uint8)\n","\n","i = 0\n","print('-'*30)\n","print('Creating images...')\n","print('-'*30)\n","for itr,image_name in enumerate(all_images):\n","    image_mask_name = all_masks[itr]\n","    img = img_as_ubyte(rgba2rgb(imread(image_name)))\n","#     img = cv2.fastNlMeansDenoisingColored(img)\n","    img_mask = np.expand_dims(imread(image_mask_name, as_grey=True),2)\n","\n","    img = np.array([img])\n","    img_mask = np.array([img_mask])\n","\n","    images[i] = img\n","    masks[i] = img_mask\n","\n","    if i%100 == 0:\n","      print(i,\" (1516) image done\")\n","    i += 1\n","print('Loading done.')\n","\n","\n","X_train, X_test, y_train, y_test, train_indices, test_indices = train_test_split(images, masks, all_images, test_size=0.1, random_state=42)\n","print('Training input is ', X_train.shape)\n","print('Training output is {}, min is {}, max is {}'.format(y_train.shape, y_train.min(), y_train.max()))\n","print('Testing set is ', X_test.shape)"],"execution_count":20,"outputs":[{"output_type":"stream","text":["------------------------------\n","Creating images...\n","------------------------------\n","0  (1516) image done\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/skimage/util/dtype.py:122: UserWarning: Possible precision loss when converting from float64 to uint8\n","  .format(dtypeobj_in, dtypeobj_out))\n"],"name":"stderr"},{"output_type":"stream","text":["100  (1516) image done\n","200  (1516) image done\n","300  (1516) image done\n","400  (1516) image done\n","500  (1516) image done\n","600  (1516) image done\n","700  (1516) image done\n","800  (1516) image done\n","900  (1516) image done\n","1000  (1516) image done\n","1100  (1516) image done\n","1200  (1516) image done\n","1300  (1516) image done\n","1400  (1516) image done\n","1500  (1516) image done\n","Loading done.\n","Training input is  (1364, 512, 512, 3)\n","Training output is (1364, 512, 512, 1), min is 0, max is 1\n","Testing set is  (152, 512, 512, 3)\n"],"name":"stdout"}]},{"metadata":{"id":"aNweB60wRWbN","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"4524186e-49c5-4cb5-cab1-328556c1dc1d","executionInfo":{"status":"ok","timestamp":1528979385489,"user_tz":-330,"elapsed":694,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["len(train_indices)"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1364"]},"metadata":{"tags":[]},"execution_count":23}]},{"metadata":{"id":"299QiEVM6Wbw","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"a70d23ea-91e4-4d75-ffeb-48c0d80cbed3","executionInfo":{"status":"ok","timestamp":1528979396448,"user_tz":-330,"elapsed":582,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["print(images.shape[1:])"],"execution_count":24,"outputs":[{"output_type":"stream","text":["(512, 512, 3)\n"],"name":"stdout"}]},{"metadata":{"id":"-XryVIfRWONv","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"f846a8e8-5deb-4f65-bfa9-aa750be8a45f","executionInfo":{"status":"ok","timestamp":1528979764336,"user_tz":-330,"elapsed":367002,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["score = model.evaluate(X_test, y_test, batch_size=10)"],"execution_count":25,"outputs":[{"output_type":"stream","text":["152/152 [==============================] - 366s 2s/step\n"],"name":"stdout"}]},{"metadata":{"id":"pU7GPEKQWUvu","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"6909edd6-2622-44ff-e644-be89b2e50c6c","executionInfo":{"status":"ok","timestamp":1528979765102,"user_tz":-330,"elapsed":662,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["score"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.12587927370087096, 0.8821466980796111]"]},"metadata":{"tags":[]},"execution_count":26}]},{"metadata":{"id":"DFujJ1n2Mus5","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"9d2f4d77-d2cf-4767-9084-9dde8538baa9","executionInfo":{"status":"ok","timestamp":1528980129901,"user_tz":-330,"elapsed":364503,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["score = model.evaluate(X_test, y_test, batch_size=1)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["152/152 [==============================] - 364s 2s/step\n"],"name":"stdout"}]},{"metadata":{"id":"LEwtrxD9NlOu","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"c30b156a-b4b7-45ef-87ec-b8fd529b44a9","executionInfo":{"status":"ok","timestamp":1528980130549,"user_tz":-330,"elapsed":550,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["score"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.1287580063110095, 0.8792654715300734]"]},"metadata":{"tags":[]},"execution_count":28}]},{"metadata":{"id":"xVzdx_DdTdgu","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"0131fdfa-fc8b-494d-e1cd-33fd9d343a45","executionInfo":{"status":"ok","timestamp":1528980131287,"user_tz":-330,"elapsed":514,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["X_test.shape"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(152, 512, 512, 3)"]},"metadata":{"tags":[]},"execution_count":29}]},{"metadata":{"id":"vu-to4c2VzLH","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"b08a2205-0f31-46f5-cde2-f09fa7aea5c2","executionInfo":{"status":"ok","timestamp":1528980132037,"user_tz":-330,"elapsed":541,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["y_test.shape"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(152, 512, 512, 1)"]},"metadata":{"tags":[]},"execution_count":30}]},{"metadata":{"id":"hJ541crKT92G","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def np_dice_coeff_with_binarize(y_true, y_pred):\n","    smooth = 1.\n","    y_true_f = y_true.flatten()\n","    y_pred_f = y_pred.flatten()\n","#     print(np.max(y_pred_f))\n","#     print(np.min(y_pred_f))\n","    y_pred_f = np.where(y_pred_f>0.5, 1, 0)\n","#     print(np.max(y_pred_f))\n","#     print(np.min(y_pred_f))\n","    intersection = np.sum(y_true_f * y_pred_f)\n","    score = (2. * intersection + smooth) / (np.sum(y_true_f) + np.sum(y_pred_f) + smooth)\n","    return score"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gkj31CPuXsCn","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def np_dice_coeff_without_binarize(y_true, y_pred):\n","    smooth = 1.\n","    y_true_f = y_true.flatten()\n","    y_pred_f = y_pred.flatten()\n","#     print(np.max(y_pred_f))\n","#     print(np.min(y_pred_f))\n","#     y_pred_f = np.where(y_pred_f>0.5, 1, 0)\n","#     print(np.max(y_pred_f))\n","#     print(np.min(y_pred_f))\n","    intersection = np.sum(y_true_f * y_pred_f)\n","    score = (2. * intersection + smooth) / (np.sum(y_true_f) + np.sum(y_pred_f) + smooth)\n","    return score"],"execution_count":0,"outputs":[]},{"metadata":{"id":"c3e6qULzURZI","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"8d3c3848-5e8f-4ad4-b4be-c2f873fdfe70","executionInfo":{"status":"ok","timestamp":1528980162828,"user_tz":-330,"elapsed":2968,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["model.predict(np.expand_dims(X_test[4],0))[0].squeeze().shape"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(512, 512)"]},"metadata":{"tags":[]},"execution_count":33}]},{"metadata":{"id":"strTliK6UgGy","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"701ab43b-b5b7-458d-8ff3-5a0eff11be01","executionInfo":{"status":"ok","timestamp":1528980165483,"user_tz":-330,"elapsed":651,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["y_test[4].squeeze().shape"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(512, 512)"]},"metadata":{"tags":[]},"execution_count":34}]},{"metadata":{"id":"QXIQgnSvYN9h","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"3be4185a-3373-4da0-8ad2-1a85b283ca35","executionInfo":{"status":"ok","timestamp":1528980169485,"user_tz":-330,"elapsed":2972,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["np_dice_coeff_without_binarize(y_test[1].squeeze(),model.predict(np.expand_dims(X_test[1],0))[0].squeeze())"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7682069778483777"]},"metadata":{"tags":[]},"execution_count":35}]},{"metadata":{"id":"uCOVSgfuUkEf","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"a0cefb0a-efa6-46fa-d7d2-67c103d48f45","executionInfo":{"status":"ok","timestamp":1528980175118,"user_tz":-330,"elapsed":3134,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["np_dice_coeff_with_binarize(y_test[1].squeeze(),model.predict(np.expand_dims(X_test[1],0))[0].squeeze())"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7658227848101266"]},"metadata":{"tags":[]},"execution_count":36}]},{"metadata":{"id":"THPQIqjrVAzs","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"8fafde00-d99f-4d24-fa48-f68a3c323c42","executionInfo":{"status":"ok","timestamp":1528980541757,"user_tz":-330,"elapsed":364310,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["dsc = 0\n","start_idx = 0\n","end_idx_plus_one = 152\n","count = end_idx_plus_one - start_idx\n","for i in range(start_idx,end_idx_plus_one):\n","  dsc = dsc + np_dice_coeff_with_binarize(y_test[i].squeeze(),model.predict(np.expand_dims(X_test[i],0))[0].squeeze())\n","dsc = dsc/count\n","print(dsc)"],"execution_count":37,"outputs":[{"output_type":"stream","text":["0.8802359317299177\n"],"name":"stdout"}]},{"metadata":{"id":"oHcQWffGXCcj","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"b92747fc-81e2-407d-8f58-ece8409b7e92","executionInfo":{"status":"ok","timestamp":1528961713815,"user_tz":-330,"elapsed":16714,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["dsc = 0\n","start_idx = 0\n","end_idx_plus_one = 152\n","count = end_idx_plus_one - start_idx\n","for i in range(start_idx,end_idx_plus_one):\n","  dsc = dsc + np_dice_coeff_without_binarize(y_test[i].squeeze(),model.predict(np.expand_dims(X_test[i],0))[0].squeeze())\n","dsc = dsc/count\n","print(dsc)"],"execution_count":38,"outputs":[{"output_type":"stream","text":["0.8792645488460915\n"],"name":"stdout"}]},{"metadata":{"id":"oOnAngDNZXH7","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":68},"outputId":"ab7e7d96-ec95-4a55-f835-7b914336f588","executionInfo":{"status":"ok","timestamp":1528961765171,"user_tz":-330,"elapsed":32802,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["dsc = 0\n","count_wob = 0\n","count_wb = 0\n","start_idx = 0\n","end_idx_plus_one = 152\n","count = end_idx_plus_one - start_idx\n","for i in range(start_idx,end_idx_plus_one):\n","  wob = np_dice_coeff_without_binarize(y_test[i].squeeze(),model.predict(np.expand_dims(X_test[i],0))[0].squeeze())\n","  wb = np_dice_coeff_with_binarize(y_test[i].squeeze(),model.predict(np.expand_dims(X_test[i],0))[0].squeeze())\n","  \n","  if wb >= wob:\n","    dsc = dsc + wb\n","    count_wb = count_wb + 1\n","  else:\n","    dsc = dsc + wob\n","    count_wob = count_wob + 1\n","dsc = dsc/count\n","print(dsc)\n","print(count_wob)\n","print(count_wb)"],"execution_count":39,"outputs":[{"output_type":"stream","text":["0.8804315667253376\n","49\n","103\n"],"name":"stdout"}]},{"metadata":{"id":"fHOQpZ1ohckQ","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":51},"outputId":"fab11df9-10ac-48a9-dad9-472279a9b87f","executionInfo":{"status":"ok","timestamp":1528961791656,"user_tz":-330,"elapsed":17059,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["score = model.evaluate(X_test, y_test, batch_size=1)\n","score"],"execution_count":40,"outputs":[{"output_type":"stream","text":["152/152 [==============================] - 17s 109ms/step\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.12875515199113197, 0.8792645264046243]"]},"metadata":{"tags":[]},"execution_count":40}]},{"metadata":{"id":"AXhucHQxVCyT","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"1665918a-ea0f-4ee0-a323-e94a9cca854b","executionInfo":{"status":"ok","timestamp":1528980803016,"user_tz":-330,"elapsed":3137,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["model.predict(np.expand_dims(X_test[0],0))[0].squeeze().shape"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(512, 512)"]},"metadata":{"tags":[]},"execution_count":44}]},{"metadata":{"id":"zR3ib9ssXTIE","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":238},"outputId":"07741c50-2d86-422e-edb7-76bed5922388","executionInfo":{"status":"ok","timestamp":1528980915462,"user_tz":-330,"elapsed":2402,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["model.predict(np.expand_dims(X_test[0],0))[0].squeeze()"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1.6529930e-09, 4.7901874e-09, 4.3921045e-08, ..., 2.3699323e-08,\n","        3.9757769e-08, 1.6079184e-07],\n","       [1.5304694e-09, 6.2868682e-11, 6.0233385e-10, ..., 4.1433483e-09,\n","        1.2744752e-08, 8.7634959e-08],\n","       [1.1439623e-09, 1.5346019e-10, 7.0235656e-10, ..., 5.1040616e-09,\n","        6.5221734e-08, 2.5567232e-07],\n","       ...,\n","       [1.1531065e-08, 1.5604721e-11, 2.6824661e-11, ..., 1.9851611e-14,\n","        2.8315588e-14, 7.0239707e-09],\n","       [1.7457362e-08, 2.6692855e-09, 3.1420314e-10, ..., 1.2539433e-12,\n","        1.0973530e-12, 2.5640221e-09],\n","       [7.9418719e-08, 7.9417166e-09, 2.1797058e-08, ..., 1.4100987e-09,\n","        1.7602229e-09, 2.4488807e-09]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":46}]},{"metadata":{"id":"Z9yRUbmaXAPc","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":221},"outputId":"7b2f5d1f-b99b-40ab-b273-62f31c64717b","executionInfo":{"status":"ok","timestamp":1528980861722,"user_tz":-330,"elapsed":4914,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["fig, (ax1, ax2) = plt.subplots(1,2)\n","# fig.set_size_inches(18.5, 10.5)\n","ax1.imshow(model.predict(np.expand_dims(X_test[0],0))[0].squeeze())\n","ax2.imshow(model.predict(np.expand_dims(X_test[0],0))[0].squeeze())"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fec66704b00>"]},"metadata":{"tags":[]},"execution_count":45},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7fec67077da0>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"yZbpFgkjXgUG","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import scipy.misc\n","scipy.misc.imsave('outfile.png', model.predict(np.expand_dims(X_test[0],0))[0].squeeze())"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Uz6oaDl1XkxN","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from google.colab import files"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dfWGowncXtqV","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["files.download('outfile.png')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"qC_Gi_X3X81E","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["im = imread('outfile.png')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"X2_mmM-lYAmf","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":2601},"outputId":"1e05142a-6330-44ad-83da-d970e54dfc08","executionInfo":{"status":"ok","timestamp":1528981239820,"user_tz":-330,"elapsed":565,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["test_indices"],"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['data_complete/images/14_43.png',\n"," 'data_complete/images/15_36.png',\n"," 'data_complete/images/9_57.png',\n"," 'data_complete/images/5_37.png',\n"," 'data_complete/images/17_18.png',\n"," 'data_complete/images/6_63.png',\n"," 'data_complete/images/19_53.png',\n"," 'data_complete/images/15_83.png',\n"," 'data_complete/images/9_56.png',\n"," 'data_complete/images/9_30.png',\n"," 'data_complete/images/7_112.png',\n"," 'data_complete/images/14_41.png',\n"," 'data_complete/images/19_119.png',\n"," 'data_complete/images/15_42.png',\n"," 'data_complete/images/6_5.png',\n"," 'data_complete/images/17_109.png',\n"," 'data_complete/images/4_82.png',\n"," 'data_complete/images/19_65.png',\n"," 'data_complete/images/9_8.png',\n"," 'data_complete/images/5_48.png',\n"," 'data_complete/images/9_72.png',\n"," 'data_complete/images/15_68.png',\n"," 'data_complete/images/6_133.png',\n"," 'data_complete/images/16_151.png',\n"," 'data_complete/images/17_46.png',\n"," 'data_complete/images/16_76.png',\n"," 'data_complete/images/5_50.png',\n"," 'data_complete/images/15_99.png',\n"," 'data_complete/images/7_129.png',\n"," 'data_complete/images/1_2.png',\n"," 'data_complete/images/15_107.png',\n"," 'data_complete/images/1_46.png',\n"," 'data_complete/images/19_69.png',\n"," 'data_complete/images/17_54.png',\n"," 'data_complete/images/5_22.png',\n"," 'data_complete/images/8_41.png',\n"," 'data_complete/images/8_111.png',\n"," 'data_complete/images/14_66.png',\n"," 'data_complete/images/7_133.png',\n"," 'data_complete/images/7_101.png',\n"," 'data_complete/images/17_76.png',\n"," 'data_complete/images/17_53.png',\n"," 'data_complete/images/8_36.png',\n"," 'data_complete/images/8_14.png',\n"," 'data_complete/images/9_70.png',\n"," 'data_complete/images/4_75.png',\n"," 'data_complete/images/4_23.png',\n"," 'data_complete/images/16_53.png',\n"," 'data_complete/images/6_7.png',\n"," 'data_complete/images/8_79.png',\n"," 'data_complete/images/14_60.png',\n"," 'data_complete/images/7_40.png',\n"," 'data_complete/images/5_95.png',\n"," 'data_complete/images/9_51.png',\n"," 'data_complete/images/8_104.png',\n"," 'data_complete/images/19_15.png',\n"," 'data_complete/images/5_51.png',\n"," 'data_complete/images/5_16.png',\n"," 'data_complete/images/17_12.png',\n"," 'data_complete/images/8_18.png',\n"," 'data_complete/images/5_71.png',\n"," 'data_complete/images/15_108.png',\n"," 'data_complete/images/17_82.png',\n"," 'data_complete/images/6_114.png',\n"," 'data_complete/images/17_19.png',\n"," 'data_complete/images/19_83.png',\n"," 'data_complete/images/6_25.png',\n"," 'data_complete/images/4_3.png',\n"," 'data_complete/images/7_95.png',\n"," 'data_complete/images/19_85.png',\n"," 'data_complete/images/5_130.png',\n"," 'data_complete/images/8_56.png',\n"," 'data_complete/images/14_58.png',\n"," 'data_complete/images/4_10.png',\n"," 'data_complete/images/9_68.png',\n"," 'data_complete/images/6_42.png',\n"," 'data_complete/images/16_144.png',\n"," 'data_complete/images/7_58.png',\n"," 'data_complete/images/4_62.png',\n"," 'data_complete/images/6_66.png',\n"," 'data_complete/images/16_10.png',\n"," 'data_complete/images/19_84.png',\n"," 'data_complete/images/7_144.png',\n"," 'data_complete/images/19_40.png',\n"," 'data_complete/images/5_127.png',\n"," 'data_complete/images/5_90.png',\n"," 'data_complete/images/7_117.png',\n"," 'data_complete/images/17_86.png',\n"," 'data_complete/images/16_128.png',\n"," 'data_complete/images/16_20.png',\n"," 'data_complete/images/7_138.png',\n"," 'data_complete/images/16_63.png',\n"," 'data_complete/images/16_61.png',\n"," 'data_complete/images/17_7.png',\n"," 'data_complete/images/4_50.png',\n"," 'data_complete/images/14_23.png',\n"," 'data_complete/images/9_98.png',\n"," 'data_complete/images/5_34.png',\n"," 'data_complete/images/7_17.png',\n"," 'data_complete/images/14_56.png',\n"," 'data_complete/images/6_27.png',\n"," 'data_complete/images/15_123.png',\n"," 'data_complete/images/5_113.png',\n"," 'data_complete/images/6_90.png',\n"," 'data_complete/images/19_37.png',\n"," 'data_complete/images/9_4.png',\n"," 'data_complete/images/8_10.png',\n"," 'data_complete/images/9_59.png',\n"," 'data_complete/images/16_3.png',\n"," 'data_complete/images/17_8.png',\n"," 'data_complete/images/1_6.png',\n"," 'data_complete/images/8_37.png',\n"," 'data_complete/images/5_77.png',\n"," 'data_complete/images/7_107.png',\n"," 'data_complete/images/7_81.png',\n"," 'data_complete/images/15_50.png',\n"," 'data_complete/images/8_59.png',\n"," 'data_complete/images/6_134.png',\n"," 'data_complete/images/1_62.png',\n"," 'data_complete/images/16_130.png',\n"," 'data_complete/images/14_37.png',\n"," 'data_complete/images/14_50.png',\n"," 'data_complete/images/6_30.png',\n"," 'data_complete/images/4_5.png',\n"," 'data_complete/images/14_18.png',\n"," 'data_complete/images/19_47.png',\n"," 'data_complete/images/7_54.png',\n"," 'data_complete/images/16_106.png',\n"," 'data_complete/images/1_91.png',\n"," 'data_complete/images/15_10.png',\n"," 'data_complete/images/17_28.png',\n"," 'data_complete/images/16_64.png',\n"," 'data_complete/images/8_90.png',\n"," 'data_complete/images/16_82.png',\n"," 'data_complete/images/1_88.png',\n"," 'data_complete/images/7_24.png',\n"," 'data_complete/images/14_68.png',\n"," 'data_complete/images/16_127.png',\n"," 'data_complete/images/8_92.png',\n"," 'data_complete/images/16_1.png',\n"," 'data_complete/images/16_60.png',\n"," 'data_complete/images/14_111.png',\n"," 'data_complete/images/7_19.png',\n"," 'data_complete/images/16_68.png',\n"," 'data_complete/images/16_18.png',\n"," 'data_complete/images/17_118.png',\n"," 'data_complete/images/17_27.png',\n"," 'data_complete/images/16_133.png',\n"," 'data_complete/images/19_8.png',\n"," 'data_complete/images/7_37.png',\n"," 'data_complete/images/19_121.png',\n"," 'data_complete/images/6_102.png']"]},"metadata":{"tags":[]},"execution_count":54}]},{"metadata":{"id":"vfSmgQygYrZk","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["for idx in range(0,152):\n","  scipy.misc.imsave(\"final_unet_pred_\"+test_indices[idx].split('/')[2], model.predict(np.expand_dims(X_test[idx],0))[0].squeeze())\n","  files.download(\"final_unet_pred_\"+test_indices[idx].split('/')[2])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1Flm6Edpc7tS","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":23205},"outputId":"02c51705-bbd8-4ac4-a298-9c13a9bd7514","executionInfo":{"status":"ok","timestamp":1528986748024,"user_tz":-330,"elapsed":4271760,"user":{"displayName":"Utkarsh Mittal","photoUrl":"//lh3.googleusercontent.com/-psfKedecgFI/AAAAAAAAAAI/AAAAAAAAAK8/g5_rC0gfh4s/s50-c-k-no/photo.jpg","userId":"110538182469063326521"}}},"cell_type":"code","source":["for idx in range(0,1364):\n","  scipy.misc.imsave(\"final_unet_pred_\"+train_indices[idx].split('/')[2], model.predict(np.expand_dims(X_train[idx],0))[0].squeeze())\n","  files.download(\"final_unet_pred_\"+train_indices[idx].split('/')[2])\n","  print(idx,\"done\")"],"execution_count":63,"outputs":[{"output_type":"stream","text":["0 done\n","1 done\n","2 done\n","3 done\n","4 done\n","5 done\n","6 done\n","7 done\n","8 done\n","9 done\n","10 done\n","11 done\n","12 done\n","13 done\n","14 done\n","15 done\n","16 done\n","17 done\n","18 done\n","19 done\n","20 done\n","21 done\n","22 done\n","23 done\n","24 done\n","25 done\n","26 done\n","27 done\n","28 done\n","29 done\n","30 done\n","31 done\n","32 done\n","33 done\n","34 done\n","35 done\n","36 done\n","37 done\n","38 done\n","39 done\n","40 done\n","41 done\n","42 done\n","43 done\n","44 done\n","45 done\n","46 done\n","47 done\n","48 done\n","49 done\n","50 done\n","51 done\n","52 done\n","53 done\n","54 done\n","55 done\n","56 done\n","57 done\n","58 done\n","59 done\n","60 done\n","61 done\n","62 done\n","63 done\n","64 done\n","65 done\n","66 done\n","67 done\n","68 done\n","69 done\n","70 done\n","71 done\n","72 done\n","73 done\n","74 done\n","75 done\n","76 done\n","77 done\n","78 done\n","79 done\n","80 done\n","81 done\n","82 done\n","83 done\n","84 done\n","85 done\n","86 done\n","87 done\n","88 done\n","89 done\n","90 done\n","91 done\n","92 done\n","93 done\n","94 done\n","95 done\n","96 done\n","97 done\n","98 done\n","99 done\n","100 done\n","101 done\n","102 done\n","103 done\n","104 done\n","105 done\n","106 done\n","107 done\n","108 done\n","109 done\n","110 done\n","111 done\n","112 done\n","113 done\n","114 done\n","115 done\n","116 done\n","117 done\n","118 done\n","119 done\n","120 done\n","121 done\n","122 done\n","123 done\n","124 done\n","125 done\n","126 done\n","127 done\n","128 done\n","129 done\n","130 done\n","131 done\n","132 done\n","133 done\n","134 done\n","135 done\n","136 done\n","137 done\n","138 done\n","139 done\n","140 done\n","141 done\n","142 done\n","143 done\n","144 done\n","145 done\n","146 done\n","147 done\n","148 done\n","149 done\n","150 done\n","151 done\n","152 done\n","153 done\n","154 done\n","155 done\n","156 done\n"],"name":"stdout"},{"output_type":"stream","text":["157 done\n","158 done\n","159 done\n","160 done\n","161 done\n","162 done\n","163 done\n","164 done\n","165 done\n","166 done\n","167 done\n","168 done\n","169 done\n","170 done\n","171 done\n","172 done\n","173 done\n","174 done\n","175 done\n","176 done\n","177 done\n","178 done\n","179 done\n","180 done\n","181 done\n","182 done\n","183 done\n","184 done\n","185 done\n","186 done\n","187 done\n","188 done\n","189 done\n","190 done\n","191 done\n","192 done\n","193 done\n","194 done\n","195 done\n","196 done\n","197 done\n","198 done\n","199 done\n","200 done\n","201 done\n","202 done\n","203 done\n","204 done\n","205 done\n","206 done\n","207 done\n","208 done\n","209 done\n","210 done\n","211 done\n","212 done\n","213 done\n","214 done\n","215 done\n","216 done\n","217 done\n","218 done\n","219 done\n","220 done\n","221 done\n","222 done\n","223 done\n","224 done\n","225 done\n","226 done\n","227 done\n","228 done\n","229 done\n","230 done\n","231 done\n","232 done\n","233 done\n","234 done\n","235 done\n","236 done\n","237 done\n","238 done\n","239 done\n","240 done\n","241 done\n","242 done\n","243 done\n","244 done\n","245 done\n","246 done\n","247 done\n","248 done\n","249 done\n","250 done\n","251 done\n","252 done\n","253 done\n","254 done\n","255 done\n","256 done\n","257 done\n","258 done\n","259 done\n","260 done\n","261 done\n","262 done\n","263 done\n","264 done\n","265 done\n","266 done\n","267 done\n","268 done\n","269 done\n","270 done\n","271 done\n","272 done\n","273 done\n","274 done\n","275 done\n","276 done\n","277 done\n","278 done\n","279 done\n","280 done\n","281 done\n","282 done\n","283 done\n","284 done\n","285 done\n","286 done\n","287 done\n","288 done\n","289 done\n","290 done\n","291 done\n","292 done\n","293 done\n","294 done\n","295 done\n","296 done\n","297 done\n","298 done\n","299 done\n","300 done\n","301 done\n","302 done\n","303 done\n","304 done\n"],"name":"stdout"},{"output_type":"stream","text":["305 done\n","306 done\n","307 done\n","308 done\n","309 done\n","310 done\n","311 done\n","312 done\n","313 done\n","314 done\n","315 done\n","316 done\n","317 done\n","318 done\n","319 done\n","320 done\n","321 done\n","322 done\n","323 done\n","324 done\n","325 done\n","326 done\n","327 done\n","328 done\n","329 done\n","330 done\n","331 done\n","332 done\n","333 done\n","334 done\n","335 done\n","336 done\n","337 done\n","338 done\n","339 done\n","340 done\n","341 done\n","342 done\n","343 done\n","344 done\n","345 done\n","346 done\n","347 done\n","348 done\n","349 done\n","350 done\n","351 done\n","352 done\n","353 done\n","354 done\n","355 done\n","356 done\n","357 done\n","358 done\n","359 done\n","360 done\n","361 done\n","362 done\n","363 done\n","364 done\n","365 done\n","366 done\n","367 done\n","368 done\n","369 done\n","370 done\n","371 done\n","372 done\n","373 done\n","374 done\n","375 done\n","376 done\n","377 done\n","378 done\n","379 done\n","380 done\n","381 done\n","382 done\n","383 done\n","384 done\n","385 done\n","386 done\n","387 done\n","388 done\n","389 done\n","390 done\n","391 done\n","392 done\n","393 done\n","394 done\n","395 done\n","396 done\n","397 done\n","398 done\n","399 done\n","400 done\n","401 done\n","402 done\n","403 done\n","404 done\n","405 done\n","406 done\n","407 done\n","408 done\n","409 done\n","410 done\n","411 done\n","412 done\n","413 done\n","414 done\n","415 done\n","416 done\n","417 done\n","418 done\n","419 done\n","420 done\n","421 done\n","422 done\n","423 done\n","424 done\n","425 done\n","426 done\n","427 done\n","428 done\n","429 done\n","430 done\n","431 done\n","432 done\n","433 done\n","434 done\n","435 done\n","436 done\n","437 done\n","438 done\n","439 done\n","440 done\n","441 done\n","442 done\n","443 done\n","444 done\n","445 done\n","446 done\n","447 done\n","448 done\n","449 done\n","450 done\n","451 done\n","452 done\n"],"name":"stdout"},{"output_type":"stream","text":["453 done\n","454 done\n","455 done\n","456 done\n","457 done\n","458 done\n","459 done\n","460 done\n","461 done\n","462 done\n","463 done\n","464 done\n","465 done\n","466 done\n","467 done\n","468 done\n","469 done\n","470 done\n","471 done\n","472 done\n","473 done\n","474 done\n","475 done\n","476 done\n","477 done\n","478 done\n","479 done\n","480 done\n","481 done\n","482 done\n","483 done\n","484 done\n","485 done\n","486 done\n","487 done\n","488 done\n","489 done\n","490 done\n","491 done\n","492 done\n","493 done\n","494 done\n","495 done\n","496 done\n","497 done\n","498 done\n","499 done\n","500 done\n","501 done\n","502 done\n","503 done\n","504 done\n","505 done\n","506 done\n","507 done\n","508 done\n","509 done\n","510 done\n","511 done\n","512 done\n","513 done\n","514 done\n","515 done\n","516 done\n","517 done\n","518 done\n","519 done\n","520 done\n","521 done\n","522 done\n","523 done\n","524 done\n","525 done\n","526 done\n","527 done\n","528 done\n","529 done\n","530 done\n","531 done\n","532 done\n","533 done\n","534 done\n","535 done\n","536 done\n","537 done\n","538 done\n","539 done\n","540 done\n","541 done\n","542 done\n","543 done\n","544 done\n","545 done\n","546 done\n","547 done\n","548 done\n","549 done\n","550 done\n","551 done\n","552 done\n","553 done\n","554 done\n","555 done\n","556 done\n","557 done\n","558 done\n","559 done\n","560 done\n","561 done\n","562 done\n","563 done\n","564 done\n","565 done\n","566 done\n","567 done\n","568 done\n","569 done\n","570 done\n","571 done\n","572 done\n","573 done\n","574 done\n","575 done\n","576 done\n","577 done\n","578 done\n","579 done\n","580 done\n","581 done\n","582 done\n","583 done\n","584 done\n","585 done\n","586 done\n","587 done\n","588 done\n","589 done\n","590 done\n","591 done\n","592 done\n","593 done\n","594 done\n","595 done\n","596 done\n","597 done\n","598 done\n","599 done\n","600 done\n"],"name":"stdout"},{"output_type":"stream","text":["601 done\n","602 done\n","603 done\n","604 done\n","605 done\n","606 done\n","607 done\n","608 done\n","609 done\n","610 done\n","611 done\n","612 done\n","613 done\n","614 done\n","615 done\n","616 done\n","617 done\n","618 done\n","619 done\n","620 done\n","621 done\n","622 done\n","623 done\n","624 done\n","625 done\n","626 done\n","627 done\n","628 done\n","629 done\n","630 done\n","631 done\n","632 done\n","633 done\n","634 done\n","635 done\n","636 done\n","637 done\n","638 done\n","639 done\n","640 done\n","641 done\n","642 done\n","643 done\n","644 done\n","645 done\n","646 done\n","647 done\n","648 done\n","649 done\n","650 done\n","651 done\n","652 done\n","653 done\n","654 done\n","655 done\n","656 done\n","657 done\n","658 done\n","659 done\n","660 done\n","661 done\n","662 done\n","663 done\n","664 done\n","665 done\n","666 done\n","667 done\n","668 done\n","669 done\n","670 done\n","671 done\n","672 done\n","673 done\n","674 done\n","675 done\n","676 done\n","677 done\n","678 done\n","679 done\n","680 done\n","681 done\n","682 done\n","683 done\n","684 done\n","685 done\n","686 done\n","687 done\n","688 done\n","689 done\n","690 done\n","691 done\n","692 done\n","693 done\n","694 done\n","695 done\n","696 done\n","697 done\n","698 done\n","699 done\n","700 done\n","701 done\n","702 done\n","703 done\n","704 done\n","705 done\n","706 done\n","707 done\n","708 done\n","709 done\n","710 done\n","711 done\n","712 done\n","713 done\n","714 done\n","715 done\n","716 done\n","717 done\n","718 done\n","719 done\n","720 done\n","721 done\n","722 done\n","723 done\n","724 done\n","725 done\n","726 done\n","727 done\n","728 done\n","729 done\n","730 done\n","731 done\n","732 done\n","733 done\n","734 done\n","735 done\n","736 done\n","737 done\n","738 done\n","739 done\n","740 done\n","741 done\n","742 done\n","743 done\n","744 done\n","745 done\n","746 done\n","747 done\n","748 done\n"],"name":"stdout"},{"output_type":"stream","text":["749 done\n","750 done\n","751 done\n","752 done\n","753 done\n","754 done\n","755 done\n","756 done\n","757 done\n","758 done\n","759 done\n","760 done\n","761 done\n","762 done\n","763 done\n","764 done\n","765 done\n","766 done\n","767 done\n","768 done\n","769 done\n","770 done\n","771 done\n","772 done\n","773 done\n","774 done\n","775 done\n","776 done\n","777 done\n","778 done\n","779 done\n","780 done\n","781 done\n","782 done\n","783 done\n","784 done\n","785 done\n","786 done\n","787 done\n","788 done\n","789 done\n","790 done\n","791 done\n","792 done\n","793 done\n","794 done\n","795 done\n","796 done\n","797 done\n","798 done\n","799 done\n","800 done\n","801 done\n","802 done\n","803 done\n","804 done\n","805 done\n","806 done\n","807 done\n","808 done\n","809 done\n","810 done\n","811 done\n","812 done\n","813 done\n","814 done\n","815 done\n","816 done\n","817 done\n","818 done\n","819 done\n","820 done\n","821 done\n","822 done\n","823 done\n","824 done\n","825 done\n","826 done\n","827 done\n","828 done\n","829 done\n","830 done\n","831 done\n","832 done\n","833 done\n","834 done\n","835 done\n","836 done\n","837 done\n","838 done\n","839 done\n","840 done\n","841 done\n","842 done\n","843 done\n","844 done\n","845 done\n","846 done\n","847 done\n","848 done\n","849 done\n","850 done\n","851 done\n","852 done\n","853 done\n","854 done\n","855 done\n","856 done\n","857 done\n","858 done\n","859 done\n","860 done\n","861 done\n","862 done\n","863 done\n","864 done\n","865 done\n","866 done\n","867 done\n","868 done\n","869 done\n","870 done\n","871 done\n","872 done\n","873 done\n","874 done\n","875 done\n","876 done\n","877 done\n","878 done\n","879 done\n","880 done\n","881 done\n","882 done\n","883 done\n","884 done\n","885 done\n","886 done\n","887 done\n","888 done\n","889 done\n","890 done\n","891 done\n","892 done\n","893 done\n","894 done\n","895 done\n","896 done\n"],"name":"stdout"},{"output_type":"stream","text":["897 done\n","898 done\n","899 done\n","900 done\n","901 done\n","902 done\n","903 done\n","904 done\n","905 done\n","906 done\n","907 done\n","908 done\n","909 done\n","910 done\n","911 done\n","912 done\n","913 done\n","914 done\n","915 done\n","916 done\n","917 done\n","918 done\n","919 done\n","920 done\n","921 done\n","922 done\n","923 done\n","924 done\n","925 done\n","926 done\n","927 done\n","928 done\n","929 done\n","930 done\n","931 done\n","932 done\n","933 done\n","934 done\n","935 done\n","936 done\n","937 done\n","938 done\n","939 done\n","940 done\n","941 done\n","942 done\n","943 done\n","944 done\n","945 done\n","946 done\n","947 done\n","948 done\n","949 done\n","950 done\n","951 done\n","952 done\n","953 done\n","954 done\n","955 done\n","956 done\n","957 done\n","958 done\n","959 done\n","960 done\n","961 done\n","962 done\n","963 done\n","964 done\n","965 done\n","966 done\n","967 done\n","968 done\n","969 done\n","970 done\n","971 done\n","972 done\n","973 done\n","974 done\n","975 done\n","976 done\n","977 done\n","978 done\n","979 done\n","980 done\n","981 done\n","982 done\n","983 done\n","984 done\n","985 done\n","986 done\n","987 done\n","988 done\n","989 done\n","990 done\n","991 done\n","992 done\n","993 done\n","994 done\n","995 done\n","996 done\n","997 done\n","998 done\n","999 done\n","1000 done\n","1001 done\n","1002 done\n","1003 done\n","1004 done\n","1005 done\n","1006 done\n","1007 done\n","1008 done\n","1009 done\n","1010 done\n","1011 done\n","1012 done\n","1013 done\n","1014 done\n","1015 done\n","1016 done\n","1017 done\n","1018 done\n","1019 done\n","1020 done\n","1021 done\n","1022 done\n","1023 done\n","1024 done\n","1025 done\n","1026 done\n","1027 done\n","1028 done\n","1029 done\n","1030 done\n","1031 done\n","1032 done\n","1033 done\n","1034 done\n","1035 done\n","1036 done\n","1037 done\n","1038 done\n","1039 done\n","1040 done\n","1041 done\n","1042 done\n","1043 done\n"],"name":"stdout"},{"output_type":"stream","text":["1044 done\n","1045 done\n","1046 done\n","1047 done\n","1048 done\n","1049 done\n","1050 done\n","1051 done\n","1052 done\n","1053 done\n","1054 done\n","1055 done\n","1056 done\n","1057 done\n","1058 done\n","1059 done\n","1060 done\n","1061 done\n","1062 done\n","1063 done\n","1064 done\n","1065 done\n","1066 done\n","1067 done\n","1068 done\n","1069 done\n","1070 done\n","1071 done\n","1072 done\n","1073 done\n","1074 done\n","1075 done\n","1076 done\n","1077 done\n","1078 done\n","1079 done\n","1080 done\n","1081 done\n","1082 done\n","1083 done\n","1084 done\n","1085 done\n","1086 done\n","1087 done\n","1088 done\n","1089 done\n","1090 done\n","1091 done\n","1092 done\n","1093 done\n","1094 done\n","1095 done\n","1096 done\n","1097 done\n","1098 done\n","1099 done\n","1100 done\n","1101 done\n","1102 done\n","1103 done\n","1104 done\n","1105 done\n","1106 done\n","1107 done\n","1108 done\n","1109 done\n","1110 done\n","1111 done\n","1112 done\n","1113 done\n","1114 done\n","1115 done\n","1116 done\n","1117 done\n","1118 done\n","1119 done\n","1120 done\n","1121 done\n","1122 done\n","1123 done\n","1124 done\n","1125 done\n","1126 done\n","1127 done\n","1128 done\n","1129 done\n","1130 done\n","1131 done\n","1132 done\n","1133 done\n","1134 done\n","1135 done\n","1136 done\n","1137 done\n","1138 done\n","1139 done\n","1140 done\n","1141 done\n","1142 done\n","1143 done\n","1144 done\n","1145 done\n","1146 done\n","1147 done\n","1148 done\n","1149 done\n","1150 done\n","1151 done\n","1152 done\n","1153 done\n","1154 done\n","1155 done\n","1156 done\n","1157 done\n","1158 done\n","1159 done\n","1160 done\n","1161 done\n","1162 done\n","1163 done\n","1164 done\n","1165 done\n","1166 done\n","1167 done\n","1168 done\n","1169 done\n","1170 done\n","1171 done\n","1172 done\n","1173 done\n","1174 done\n","1175 done\n","1176 done\n","1177 done\n","1178 done\n","1179 done\n","1180 done\n","1181 done\n","1182 done\n","1183 done\n"],"name":"stdout"},{"output_type":"stream","text":["1184 done\n","1185 done\n","1186 done\n","1187 done\n","1188 done\n","1189 done\n","1190 done\n","1191 done\n","1192 done\n","1193 done\n","1194 done\n","1195 done\n","1196 done\n","1197 done\n","1198 done\n","1199 done\n","1200 done\n","1201 done\n","1202 done\n","1203 done\n","1204 done\n","1205 done\n","1206 done\n","1207 done\n","1208 done\n","1209 done\n","1210 done\n","1211 done\n","1212 done\n","1213 done\n","1214 done\n","1215 done\n","1216 done\n","1217 done\n","1218 done\n","1219 done\n","1220 done\n","1221 done\n","1222 done\n","1223 done\n","1224 done\n","1225 done\n","1226 done\n","1227 done\n","1228 done\n","1229 done\n","1230 done\n","1231 done\n","1232 done\n","1233 done\n","1234 done\n","1235 done\n","1236 done\n","1237 done\n","1238 done\n","1239 done\n","1240 done\n","1241 done\n","1242 done\n","1243 done\n","1244 done\n","1245 done\n","1246 done\n","1247 done\n","1248 done\n","1249 done\n","1250 done\n","1251 done\n","1252 done\n","1253 done\n","1254 done\n","1255 done\n","1256 done\n","1257 done\n","1258 done\n","1259 done\n","1260 done\n","1261 done\n","1262 done\n","1263 done\n","1264 done\n","1265 done\n","1266 done\n","1267 done\n","1268 done\n","1269 done\n","1270 done\n","1271 done\n","1272 done\n","1273 done\n","1274 done\n","1275 done\n","1276 done\n","1277 done\n","1278 done\n","1279 done\n","1280 done\n","1281 done\n","1282 done\n","1283 done\n","1284 done\n","1285 done\n","1286 done\n","1287 done\n","1288 done\n","1289 done\n","1290 done\n","1291 done\n","1292 done\n","1293 done\n","1294 done\n","1295 done\n","1296 done\n","1297 done\n","1298 done\n","1299 done\n","1300 done\n","1301 done\n","1302 done\n","1303 done\n","1304 done\n","1305 done\n","1306 done\n","1307 done\n","1308 done\n","1309 done\n","1310 done\n","1311 done\n","1312 done\n","1313 done\n","1314 done\n","1315 done\n","1316 done\n","1317 done\n","1318 done\n","1319 done\n","1320 done\n","1321 done\n","1322 done\n","1323 done\n"],"name":"stdout"},{"output_type":"stream","text":["1324 done\n","1325 done\n","1326 done\n","1327 done\n","1328 done\n","1329 done\n","1330 done\n","1331 done\n","1332 done\n","1333 done\n","1334 done\n","1335 done\n","1336 done\n","1337 done\n","1338 done\n","1339 done\n","1340 done\n","1341 done\n","1342 done\n","1343 done\n","1344 done\n","1345 done\n","1346 done\n","1347 done\n","1348 done\n","1349 done\n","1350 done\n","1351 done\n","1352 done\n","1353 done\n","1354 done\n","1355 done\n","1356 done\n","1357 done\n","1358 done\n","1359 done\n","1360 done\n","1361 done\n","1362 done\n","1363 done\n"],"name":"stdout"}]}]}